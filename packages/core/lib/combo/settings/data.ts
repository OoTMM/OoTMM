import { Game } from '../config';

function hasGame(x: any, g: Game) {
  return x.games === g || x.games === 'ootmm';
}

const hasOoTMM = (x: any) => x.games === 'ootmm';
const hasOoT = (x: any) => hasGame(x, 'oot');
const hasMM = (x: any) => hasGame(x, 'mm');

const SETTING_PRICE = {
  type: 'enum',
  values: [
    { value: 'affordable', name: 'Affordable', description: 'All prices are set to 10 rupees.' },
    { value: 'vanilla', name: 'Vanilla', description: 'All prices are set to their vanilla values.' },
    { value: 'weighted', name: 'Weighted Random', description: 'All prices are randomized, but lower prices are favored.' },
    { value: 'random', name: 'Random', description: 'All prices are randomized.' },
  ],
  category: 'main.prices',
  default: 'vanilla',
} as const;

export const SETTINGS = [{
  key: 'games',
  name: 'Games',
  category: 'main',
  type: 'enum',
  description: 'The games.',
  values: [
    { value: 'ootmm', name: 'OoT+MM', description: 'The combo randomizer experience.' },
    { value: 'oot', name: 'OoT Only', description: 'Ocarina of Time Only.' },
    { value: 'mm', name: 'MM Only', description: 'Majora\'s Mask Only.' },
  ],
  default: 'ootmm'
}, {
  key: 'mode',
  name: 'Mode',
  category: 'main',
  type: 'enum',
  description: 'The game mode.',
  values: [
    { value: 'single', name: 'Singleplayer', description: 'A regular, one player seed' },
    { value: 'coop', name: 'Co-op', description: 'Everyone plays the same seed, all items are shared' },
    { value: 'multi', name: 'Multiworld', description: 'A multiplayer setting where players can find each other\'s items' },
  ],
  default: 'single'
}, {
  key: 'players',
  name: 'Players',
  category: 'main',
  type: 'number',
  description: 'For multiworld, how many players are in the game.',
  min: (x: any) => x.mode === 'multi' ? 2 : 1,
  max: (x: any) => x.mode === 'multi' ? 127 : 1,
  cond: (x: any) => x.mode === 'multi',
  default: 1
}, {
  key: 'teams',
  name: 'Teams',
  category: 'main',
  type: 'number',
  description: 'For multiplayers, how many teams will compete. Players in different teams will play the same seed but will not interact with each other.',
  min: 1,
  max: 64,
  cond: (x: any) => x.mode !== 'single',
  default: 1
}, {
  key: 'distinctWorlds',
  name: 'Distinct Worlds',
  category: 'main',
  type: 'boolean',
  description: 'For multiworld, with settings that involve randomness, should the worlds have distinct properties (ER, MQ, price rando...).',
  cond: (x: any) => x.mode === 'multi',
  default: true
}, {
  key: 'goal',
  name: 'Goal',
  category: 'main',
  type: 'enum',
  description: 'The objective of the seed. The game will end when the specified goal is reached.',
  values: [
    { value: 'any', name: 'Any Final Boss', description: 'You can beat either Ganon or Majora.', cond: hasOoTMM },
    { value: 'ganon', name: 'Ganon', description: 'You must beat Ganon.', cond: hasOoT },
    { value: 'majora', name: 'Majora', description: 'You must beat Majora.', cond: hasMM },
    { value: 'both', name: 'Ganon & Majora', description: 'You must beat Ganon AND Majora. You can do so in any order.', cond: hasOoTMM },
    { value: 'triforce', name: 'Triforce Hunt', description: 'You must collect Triforce Pieces to win.' },
    { value: 'triforce3', name: 'Triforce Quest', description: 'You must collect the three parts of the Triforce (Power, Courage and Wisdom) to win. Specific hints will guide you.' },
  ],
  default: 'both',
}, {
  key: 'triforceGoal',
  name: 'Triforce Goal',
  category: 'main',
  type: 'number',
  description: 'The amount of Triforce Pieces that are required to win.',
  default: 20,
  cond: (s: any) => s.goal === 'triforce',
  min: 1,
  max: (s: any) => s.triforcePieces,
}, {
  key: 'triforcePieces',
  name: 'Triforce Pieces',
  category: 'main',
  type: 'number',
  description: 'The total amount of Triforce Pieces in the item pool.',
  default: 30,
  cond: (s: any) => s.goal === 'triforce',
  min: 1,
  max: 999,
}, {
  key: 'logic',
  name: 'Logic',
  category: 'main',
  type: 'enum',
  description: 'The guarantees you have regarding reachability of locations.',
  values: [
    { value: 'allLocations', name: 'All Locations', description: 'Every location in the game can be reached. The seed can always be completed.' },
    { value: 'beatable', name: 'Beatable Only', description: 'Some items can be placed in locations that are never reachable. The seed can always be completed.' },
    { value: 'none', name: 'No Logic', description: 'Items are placed completely at random. The seed might be unbeatable.' },
  ],
  default: 'allLocations'
}, {
  key: 'itemPool',
  name: 'Item Pool',
  category: 'main',
  type: 'enum',
  description: 'Change the item pool.',
  values: [
    { value: 'plentiful', name: 'Plentiful', description: 'One extra copy of every major item. Heart containers only.' },
    { value: 'normal', name: 'Normal', description: 'The regular item count for each game.' },
    { value: 'scarce', name: 'Scarce', description: 'One less of every major item. No Heart Pieces.' },
    { value: 'minimal', name: 'Minimal', description: 'Only one of each major item. No Heart Pieces or Containers.' },
    { value: 'barren', name: 'Barren', description: 'Minimal item pool, plus every shuffled item that is not strictly required to reach the goal (beatable only) or any location (all locations) gets removed.' },
  ],
  default: 'normal'
}, {
  key: 'generateSpoilerLog',
  name: 'Generate Spoiler Log',
  category: 'main',
  type: 'boolean',
  description: 'Generate an extra downloadable text file with the location of every item in the seed as well as other information. It is recommended to enable this option.',
  default: true
}, {
  key: 'probabilisticFoolish',
  name: 'Probabilistic Foolish Hints',
  category: 'hints',
  type: 'boolean',
  description: 'If you don\'t know what this is, leave it ON',
  default: true
}, {
  key: 'noPlandoHints',
  name: 'No Plando Hints',
  category: 'hints',
  type: 'boolean',
  description: 'Prevents items that are part of a plando from being hinted',
  default: true
}, {
  key: 'extraHintRegions',
  name: 'Extra Hint Regions',
  category: 'hints',
  type: 'boolean',
  description: 'Make the region hints more granular: Makes Goron Racetrack and Butler Race into their own regions, and splits Ganon\'s Castle/Tower and Normal/Inverted Stone Tower Temple.',
  default: false
}, {
  key: 'hintPathDungeons',
  name: 'Hint Path to Dungeons',
  category: 'hints',
  type: 'boolean',
  description: 'Enable WotH hints to be upgraded to dungeons paths when appropriate.',
  default: false
}, {
  key: 'hintPathBoss',
  name: 'Hint Path to Boss',
  category: 'hints',
  type: 'boolean',
  description: 'Enable WotH hints to be upgraded to boss paths when appropriate.',
  default: false
}, {
  key: 'hintPathEndBoss',
  name: 'Hint Path to End Boss',
  category: 'hints',
  type: 'boolean',
  description: 'Enable WotH hints to be upgraded to end boss paths when appropriate.',
  default: false
}, {
  key: 'hintPathEvents',
  name: 'Hint Path to Events',
  category: 'hints',
  type: 'boolean',
  description: 'Enable WotH hints to be upgraded to events paths when appropriate.',
  default: false,
}, {
  key: 'hintImportance',
  name: 'Hint Importance',
  category: 'hints',
  type: 'boolean',
  description: 'Hints will tell if an item is foolish, sometimes required, or always required',
  default: false,
  cond: (s: any) => s.logic !== 'none',
}, {
  key: 'songs',
  name: 'Song Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where songs can be obtained, in both games.',
  values: [
    { value: 'songLocations', name: 'Song Locations', description: 'Only locations that contain songs in the vanilla games will have songs.' },
    { value: 'anywhere', name: 'Anywhere', description: 'Songs can be placed anywhere.' },
  ],
  default: 'songLocations'
}, {
  key: 'goldSkulltulaTokens',
  name: 'Gold Skulltula Tokens Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls how Gold Skulltulas will be shuffled',
  values: [
    { value: 'none', name: 'No Shuffle', description: 'All Gold Skulltula Tokens will be vanilla' },
    { value: 'dungeons', name: 'Dungeons Only', description: 'Only the Gold Skulltulas within dungeons will be shuffled' },
    { value: 'overworld', name: 'Overworld Only', description: 'Only the Gold Skulltulas outside of dungeons will be shuffled' },
    { value: 'all', name: 'All Tokens', description: 'Every single Gold Skulltula will be shuffled' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'housesSkulltulaTokens',
  name: 'House Skulltula Tokens Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls how Swamp and Ocean Skulltulas will be shuffled',
  values: [
    { value: 'none', name: 'No Shuffle', description: 'Swamp and Ocean Tokens will be vanilla' },
    { value: 'cross', name: 'Gold Skulltulas Only', description: 'Any unshuffled Token can be found on any other unshuffled Skulltula', cond: hasOoTMM },
    { value: 'all', name: 'All Tokens', description: 'Swamp and Ocean Tokens can be found anywhere' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'tingleShuffle',
  name: 'Tingle Maps Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Tingle Maps are',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'Tingle Maps can be bought at Tingle, in their original locations' },
    { value: 'anywhere', name: 'Anywhere', description: 'Tingle Maps will be anywhere' },
    { value: 'starting', name: 'Starting Items', description: 'Tingle Maps are in Link\'s pocket' },
    { value: 'removed', name: 'Removed', description: 'Tingle Maps are fully removed and cannot be obtained' },
  ],
  cond: hasMM,
  default: 'vanilla'
}, {
  key: 'mapCompassShuffle',
  name: 'Map / Compass Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Maps and Compasses can be',
  values: [
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Maps and Compasses will be in their own dungeons' },
    { value: 'anywhere', name: 'Anywhere', description: 'Maps and Compasses can be on any location' },
    { value: 'starting', name: 'Starting Items', description: 'Maps and Compasses will be in Link\'s Pocket' },
    { value: 'removed', name: 'Removed', description: 'Fully removed and cannot be obtained' },
  ],
  default: 'ownDungeon'
}, {
  key: 'smallKeyShuffleOot',
  name: 'Small Key Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Small Keys (for Dungeons) can be in OoT',
  values: [
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Dungeon Small Keys can only be found in their own dungeons' },
    { value: 'anywhere', name: 'Anywhere', description: 'Dungeon Small Keys can be found anywhere' },
    { value: 'removed', name: 'Removed', description: 'Small Keys are removed and Small Key doors are unlocked' },
    { value: 'vanilla', name: 'Vanilla', description: 'Dungeon Small Keys are placed in their original chests', cond: (s: any) => s.smallKeyRingOot.type === 'none' },
  ],
  cond: hasOoT,
  default: 'ownDungeon'
}, {
  key: 'smallKeyShuffleMm',
  name: 'Small Key Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Small Keys (for Dungeons) can be in MM',
  values: [
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Dungeon Small Keys can only be found in their own dungeons' },
    { value: 'anywhere', name: 'Anywhere', description: 'Dungeon Small Keys can be found anywhere' },
    { value: 'removed', name: 'Removed', description: 'Small Keys are removed and Small Key doors are unlocked' },
    { value: 'vanilla', name: 'Vanilla', description: 'Dungeon Small Keys are placed in their original chests', cond: (s: any) => s.smallKeyRingMm.type === 'none' },
  ],
  cond: hasMM,
  default: 'ownDungeon'
}, {
  key: 'smallKeyShuffleHideout',
  name: 'Hideout Small Key Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Hideout (Gerudo Fortress) Small Keys can be',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'Hideout Small Keys are always on the guards' },
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Hideout Small Keys can only be found within Gerudo Fortress INTERIOR' },
    { value: 'anywhere', name: 'Anywhere', description: 'Hideout Small Keys can be found anywhere' },
  ],
  cond: hasOoT,
  default: 'ownDungeon'
}, {
  key: 'smallKeyShuffleChestGame',
  name: 'Chest Game Small Key Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Chest Game Small Keys can be',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'Chest Minigame will behave as in vanilla' },
    { value: 'ownDungeon', name: 'Own Minigame', description: 'Chest Minigame Keys can be found inside the minigame' },
    { value: 'anywhere', name: 'Anywhere', description: 'Chest Minigame Keys can be found anywhere' },
  ],
  cond: hasOoT,
  default: 'vanilla'
}, {
  key: 'bossKeyShuffleOot',
  name: 'Boss Key Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Boss Keys can be in OoT',
  values: [
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Boss Keys can only be in their own dungeons' },
    { value: 'anywhere', name: 'Anywhere', description: 'Boss Keys can be found anywhere' },
    { value: 'removed', name: 'Removed', description: 'Boss Keys are removed and boss doors are unlocked' },
    { value: 'vanilla', name: 'Vanilla', description: 'Boss Keys are placed in their original chest' },
  ],
  cond: hasOoT,
  default: 'ownDungeon'
}, {
  key: 'bossKeyShuffleMm',
  name: 'Boss Key Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Boss Keys can be in MM',
  values: [
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Boss Keys can only be in their own dungeons' },
    { value: 'anywhere', name: 'Anywhere', description: 'Boss Keys can be found anywhere' },
    { value: 'removed', name: 'Removed', description: 'Boss Keys are removed and boss doors are unlocked' },
    { value: 'vanilla', name: 'Vanilla', description: 'Boss Keys are placed in their original chest' },
  ],
  cond: hasMM,
  default: 'ownDungeon'
}, {
  key: 'smallKeyRingOot',
  name: 'Small Key Ring (OoT)',
  category: 'main.shuffle',
  type: 'set',
  description: 'Controls the grouping of keys into key rings, for OoT',
  values: [
    { value: 'Forest', name: 'Forest Temple' },
    { value: 'Fire',   name: 'Fire Temple' },
    { value: 'Water',  name: 'Water Temple' },
    { value: 'Shadow', name: 'Shadow Temple' },
    { value: 'Spirit', name: 'Spirit Temple' },
    { value: 'BotW',   name: 'Bottom of the Well' },
    { value: 'GTG',    name: 'Gerudo Training Grounds' },
    { value: 'Ganon',  name: 'Ganon\'s Castle' },
    { value: 'GF',     name: 'Hideout' },
    { value: 'TCG',    name: 'Chest Game' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'smallKeyRingMm',
  name: 'Small Key Ring (MM)',
  category: 'main.shuffle',
  type: 'set',
  description: 'Controls the grouping of keys into key rings, for MM',
  values: [
    { value: 'WF', name: 'Woodfall Temple' },
    { value: 'SH', name: 'Snowhead Temple' },
    { value: 'GB', name: 'Great Bay Temple' },
    { value: 'ST', name: 'Stone Tower Temple' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'silverRupeeShuffle',
  name: 'Silver Rupee Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Make silver rupees items that can be shuffled.',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'Silver Rupees are vanilla' },
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'Silver Rupees are found within their own dungeon' },
    { value: 'anywhere', name: 'Anywhere', description: 'Silver Rupees are shuffled in the item pool' },
  ],
  cond: hasOoT,
  default: 'vanilla'
}, {
  key: 'silverRupeePouches',
  name: 'Silver Rupee Pouches',
  category: 'main.shuffle',
  type: 'set',
  description: 'Controls grouping of silver rupees into a single item.',
  values: [
    { value: 'DC', name: 'Dodongo\'s Cavern' },
    { value: 'BotW', name: 'Bottom of the Well' },
    { value: 'Spirit_Child', name: 'Spirit Temple (Child)' },
    { value: 'Spirit_Sun', name: 'Spirit Temple (Sun)' },
    { value: 'Spirit_Boulders', name: 'Spirit Temple (Boulders)' },
    { value: 'Spirit_Lobby', name: 'Spirit Temple (Lobby)' },
    { value: 'Spirit_Adult', name: 'Spirit Temple (Adult)' },
    { value: 'Shadow_Scythe', name: 'Shadow Temple (Scythe)' },
    { value: 'Shadow_Pit', name: 'Shadow Temple (Pit)' },
    { value: 'Shadow_Spikes', name: 'Shadow Temple (Spikes)' },
    { value: 'Shadow_Blades', name: 'Shadow Temple (Blades)' },
    { value: 'IC_Scythe', name: 'Ice Cavern (Scythe)' },
    { value: 'IC_Block', name: 'Ice Cavern (Block)' },
    { value: 'GTG_Slopes', name: 'GTG (Slopes)' },
    { value: 'GTG_Lava', name: 'GTG (Lava)' },
    { value: 'GTG_Water', name: 'GTG (Water)' },
    { value: 'Ganon_Light', name: 'Ganon\'s Castle (Light)' },
    { value: 'Ganon_Forest', name: 'Ganon\'s Castle (Forest)' },
    { value: 'Ganon_Fire', name: 'Ganon\'s Castle (Fire)' },
    { value: 'Ganon_Water', name: 'Ganon\'s Castle (Water)' },
    { value: 'Ganon_Shadow', name: 'Ganon\'s Castle (Shadow)' },
    { value: 'Ganon_Spirit', name: 'Ganon\'s Castle (Spirit)' },
  ],
  default: 'none',
  cond: (s: any) => hasOoT(s) && s.silverRupeeShuffle !== 'vanilla',
}, {
  key: 'townFairyShuffle',
  name: 'Town Stray Fairy Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where the Clock Town Stray Fairy can be',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'The Clock Town Stray Fairy will be at its original location'},
    { value: 'anywhere', name: 'Anywhere', description: 'The Clock Town Stray Fairy can be found anywhere' },
  ],
  cond: hasMM,
  default: 'vanilla'
}, {
  key: 'strayFairyChestShuffle',
  name: 'Dungeon Chest Fairy Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where the Dungeon Chest Stray Fairies can be',
  values: [
    { value: 'starting', name: 'Starting', description: 'Start with the fairies' },
    { value: 'vanilla', name: 'Vanilla', description: 'The Dungeon Chest Stray Fairies will be at their original locations' },
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'All Dungeon Chest Stray Fairies are shuffled within their own dungeon' },
    { value: 'anywhere', name: 'Anywhere', description: 'All Dungeon Chest Stray Fairies are shuffled anywhere' },
  ],
  cond: hasMM,
  default: 'ownDungeon'
}, {
  key: 'strayFairyOtherShuffle',
  name: 'Dungeon Freestanding Fairy Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where the Dungeon Freestanding Stray Fairies can be',
  values: [
    { value: 'removed', name: 'Removed', description: 'Start with the fairies, and the bubbles are removed.' },
    { value: 'starting', name: 'Starting', description: 'Start with the fairies' },
    { value: 'vanilla', name: 'Vanilla', description: 'The Dungeon Freestanding Stray Fairies will be at their original locations' },
    { value: 'ownDungeon', name: 'Own Dungeon', description: 'All Dungeon Freestanding Stray Fairies are shuffled within their own dungeon' },
    { value: 'anywhere', name: 'Anywhere', description: 'All Dungeon Freestanding Stray Fairies are shuffled anywhere' },
  ],
  cond: hasMM,
  default: 'vanilla'
}, {
  key: 'ganonBossKey',
  name: 'Ganon Boss Key Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where Ganon Boss Key should be',
  values: [
    { value: 'removed', name: 'Removed', description: 'Ganon Boss Key is removed, and so is the lock on the door leading to Ganondorf' },
    { value: 'vanilla', name: 'Vanilla', description: 'Ganon Boss Key will be in its original chest, within Ganon\'s Castle' },
    { value: 'ganon', name: 'Ganon\'s Castle', description: 'Ganon Boss Key will be anywhere within Ganon\'s Castle' },
    { value: 'anywhere', name: 'Anywhere', description: 'Ganon Boss Key can be found anywhere' },
    { value: 'custom', name: 'Custom', description: '' },
  ],
  default: 'removed',
  cond: (s: any) => hasOoT(s) && s.goal !== 'triforce' && s.goal !== 'triforce3',
}, {
  key: 'dungeonRewardShuffle',
  name: 'Dungeon Reward Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls where the dungeons rewards should be',
  values: [
    { value: 'dungeonBlueWarps', name: 'Dungeon Blue Warps', description: 'Only the blue warps will grant the rewards' },
    { value: 'dungeonsLimited', name: 'Dungeons (Max one per dungeon)', description: 'Anywhere in dungeons (one max)' },
    { value: 'dungeons', name: 'Dungeons (Unrestricted)', description: 'Anywhere in dungeons' },
    { value: 'anywhere', name: 'Anywhere', description: 'Can be anywhere' },
  ],
  default: 'dungeonBlueWarps'
}, {
  key: 'scrubShuffleOot',
  name: 'Scrub Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not Business Scrubs are shuffled (OoT).<br>If disabled, the one in Hyrule Field by Lake Hylia\'s fences, the one by the Bridge in Lost Woods, and the front one in the grotto near Sacred Forest Meadow will still be shuffled',
  cond: hasOoT,
  default: false,
}, {
  key: 'scrubShuffleMm',
  name: 'Scrub Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not Business Scrubs are shuffled (MM).<br>If disabled, the one in Termina Field near the Observatory and the one in Goron Village will still be shuffled',
  cond: hasMM,
  default: false
}, {
  key: 'cowShuffleOot',
  name: 'Cow Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not playing Epona\'s Song near cows will give an item (OoT)',
  cond: hasOoT,
  default: false
}, {
  key: 'cowShuffleMm',
  name: 'Cow Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not playing Epona\'s Song near cows will give an item (MM)',
  cond: hasMM,
  default: false
}, {
  key: 'shopShuffleOot',
  name: 'Shop Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not shops in OoT should have their items shuffled',
  values: [
    { value: 'none', name: 'None', description: 'All the items are vanilla' },
    { value: 'full', name: 'Full', description: 'All 8 items are shuffled' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shopShuffleMm',
  name: 'Shop Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not shops in MM should have their items shuffled.<br>If "None" is selected, the Bomb Bag purchases will still be shuffled',
  values: [
    { value: 'none', name: 'None', description: 'All the items are vanilla' },
    { value: 'full', name: 'Full', description: 'All 8 items are shuffled' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'owlShuffle',
  name: 'Owl Statue Shuffle',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Make Owl Statues items that can be shuffled.',
  values: [
    { value: 'none', name: 'None', description: 'Owl Statues are vanilla' },
    { value: 'anywhere', name: 'Anywhere', description: 'Owl Statues are shuffled in the item pool' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shufflePotsOot',
  name: 'Pots Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the pots are shuffled (OoT).',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shufflePotsMm',
  name: 'Pots Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the pots are shuffled (MM).',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shuffleCratesOot',
  name: 'Crates Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the crates are shuffled (OoT).',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shuffleCratesMm',
  name: 'Crates Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the crates are shuffled (MM).',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shuffleBarrelsMm',
  name: 'Barrels Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the barrels are shuffled (MM).',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shuffleHivesOot',
  name: 'Hives Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the beehives are shuffled (OoT)',
  cond: hasOoT,
  default: false
}, {
  key: 'shuffleHivesMm',
  name: 'Hives Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the beehives are shuffled (MM)<br>One beehive in the grotto with Bio Babas will always be shuffled regardless of this setting, thus CAMC will not affect it.',
  cond: hasMM,
  default: false
}, {
  key: 'shuffleGrassOot',
  name: 'Grass Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the grass is shuffled (OoT)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shuffleGrassMm',
  name: 'Grass Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the grass is shuffled (MM)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shuffleTFGrassMm',
  name: 'Termina Field Grass Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Termina Field grass is shuffled (MM). Grottos do not count towards this',
  cond: (s: any) => hasMM(s) && (s.shuffleGrassMm === 'overworld' || s.shuffleGrassMm === 'all'),
  default: false
}, {
  key: 'shuffleFreeRupeesOot',
  name: 'Freestanding Rupees Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the freestanding rupees are shuffled (OoT)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shuffleFreeRupeesMm',
  name: 'Freestanding Rupees Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the freestanding rupees are shuffled (MM)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shuffleFreeHeartsOot',
  name: 'Freestanding Hearts Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the freestanding hearts are shuffled (OoT)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shuffleFreeHeartsMm',
  name: 'Freestanding Hearts Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the freestanding hearts are shuffled (MM)',
  cond: hasMM,
  default: false
}, {
  key: 'shuffleWonderItemsOot',
  name: 'Wonder Items Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the wonder items are shuffled (OoT)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'shuffleWonderItemsMm',
  name: 'Wonder Items Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the wonder items are shuffled (MM)',
  cond: hasMM,
  default: false
}, {
  key: 'shuffleSnowballsMm',
  name: 'Snowball Shuffle (MM)',
  category: 'main.shuffle',
  type: 'enum',
  description: 'Controls whether or not the snowballs are shuffled (MM)',
  values: [
    { value: 'none', name: 'None' },
    { value: 'all', name: 'All' },
    { value: 'overworld', name: 'Overworld' },
    { value: 'dungeons', name: 'Dungeons only' },
  ],
  cond: hasMM,
  default: 'none'
}, {
  key: 'shuffleButterfliesOot',
  name: 'Butterflies Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the butterflies are shuffled (OoT)',
  cond: hasOoT,
  default: false,
}, {
  key: 'shuffleButterfliesMm',
  name: 'Butterflies Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the butterflies are shuffled (MM)',
  cond: hasMM,
  default: false,
}, {
  key: 'shuffleRedBouldersOot',
  name: 'Red Boulder Drops Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the red boulders drop an item when broken (OoT)',
  cond: hasOoT,
  default: false,
}, {
  key: 'shuffleRedBouldersMm',
  name: 'Red Boulder Drops Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the red boulders drop an item when broken (MM)',
  cond: hasMM,
  default: false,
}, {
  key: 'shuffleFrogsRupeesOot',
  name: 'Frogs Rupees Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the purple rupees from the Frogs Ocarina Game in Zora\'s River are shuffled',
  cond: hasOoT,
  default: false,
}, {
  key: 'shuffleIciclesOot',
  name: 'Icicles Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not grounded icicles drop an item when broken (OoT)',
  cond: hasOoT,
  default: false,
}, {
  key: 'shuffleIciclesMm',
  name: 'Icicles Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not grounded icicles drop an item when broken (MM)',
  cond: hasMM,
  default: false,
}, {
  key: 'shuffleRedIceOot',
  name: 'Red Ice Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the red ice drop an item for thawing it (OoT)',
  cond: hasOoT,
  default: false,
}, {
  key: 'shuffleOcarinasOot',
  name: 'Ocarina Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the two Ocarinas in OoT are shuffled',
  cond: hasOoT,
  default: true
}, {
  key: 'shuffleMasterSword',
  name: 'Master Sword Shuffle',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Master Sword is shuffled',
  cond: hasOoT,
  default: true
}, {
  key: 'shuffleGerudoCard',
  name: 'Gerudo Card Shuffle',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Gerudo Membership Card is shuffled',
  cond: hasOoT,
  default: true
}, {
  key: 'shuffleMaskTrades',
  name: 'Mask Trade Shuffle',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not trading the masks are checks',
  cond: hasOoT,
  default: false,
}, {
  key: 'shuffleMerchantsOot',
  name: 'Merchants Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Old Hag Potion, Talon Milk and Carpet Man Bombchu are shuffled.',
  cond: hasOoT,
  default: false
}, {
  key: 'shuffleMerchantsMm',
  name: 'Merchants Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Milk Bar and Gorman milk purchases in MM are shuffled',
  cond: hasMM,
  default: false
}, {
  key: 'pondFishShuffle',
  name: 'Fishing Pond Fish Shuffle',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Fish (and the Loaches) in the Fishing Pond are shuffled amongst all the items.',
  cond: hasOoT,
  default: false
}, {
  key: 'divingGameRupeeShuffle',
  name: 'Diving Game Rupee Shuffle',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the Zora\'s Domain Diving Game has 5 random items instead of green, blue, red, purple and 500 rupees.',
  cond: hasOoT,
  default: false
}, {
  key: 'fairyFountainFairyShuffleOot',
  name: 'Fairy Fountain Fairy Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the fairies in fairy fountains are shuffled (OoT).<br>Includes the fairies in Ganon\'s Castle behind the invisible wall and in Desert Colossus from the oasis.',
  cond: hasOoT,
  default: false
}, {
  key: 'fairyFountainFairyShuffleMm',
  name: 'Fairy Fountain Fairy Shuffle (MM)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not the fairies in the Beneath the Well fairy fountain are shuffled (MM).',
  cond: hasMM,
  default: false
}, {
  key: 'fairySpotShuffleOot',
  name: 'Fairy Spot Shuffle (OoT)',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Controls whether or not big fairies in fairy spots are shuffled (OoT). Play either Song of Storms or Sun\'s Song',
  cond: hasOoT,
  default: false
}, {
  key: 'eggShuffle',
  name: 'Weird / Pocket Egg Content Shuffle',
  category: 'main.shuffle',
  type: 'boolean',
  description: 'Fun setting: should using the Weird/Pocket Eggs give an item? If not, they\'re entirely removed from the game',
  cond: hasOoT,
  default: false
},
{ ...SETTING_PRICE, key: 'priceOotShops', name: 'OoT Shop Prices', description: 'Sets the price of items inside OoT shops', cond: hasOoT },
{ ...SETTING_PRICE, key: 'priceOotScrubs', name: 'OoT Scrub Prices', description: 'Sets the price of items sold by OoT scrubs', cond: hasOoT },
{ ...SETTING_PRICE, key: 'priceOotMerchants', name: 'OoT Merchants Prices', description: 'Sets the price of items sold by OoT merchants', cond: hasOoT },
{ ...SETTING_PRICE, key: 'priceMmShops', name: 'MM Shop Prices', description: 'Sets the price of items sold inside MM shops', cond: hasMM },
{ ...SETTING_PRICE, key: 'priceMmTingle', name: 'MM Tingle Prices', description: 'Sets the price of items sold by Tingle', cond: hasMM },
{
  key: 'ganonTrials',
  name: 'Ganon Trials',
  category: 'main.events',
  type: 'set',
  description: 'Controls which trials in Ganon\'s Castle are enabled',
  values: [
    { value: 'Light',   name: 'Light Trial' },
    { value: 'Forest',  name: 'Forest Trial' },
    { value: 'Fire',    name: 'Fire Trial' },
    { value: 'Water',   name: 'Water Trial' },
    { value: 'Shadow',  name: 'Shadow Trial' },
    { value: 'Spirit',  name: 'Spirit Trial' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'moonCrash',
  name: 'Moon Crash Behavior',
  category: 'main.events',
  type: 'enum',
  description: 'Changes the behavior of moon crashing',
  values: [
    { value: 'reset', name:  'Last Save',  description: 'When the Moon crashes, all progress made in MM since the last save will be lost. Saving is disabled on the Clock Tower Roof.' },
    { value: 'cycle', name:  'New Cycle',  description: 'When the Moon crashes, a new cycle will start, keeping progress. Saving is enabled on the Clock Tower Roof, allowing you to leave by warping back to spawn.' },
  ],
  cond: hasMM,
  default: 'reset'
}, {
  key: 'startingAge',
  name: 'Starting Age',
  category: 'main.events',
  type: 'enum',
  description: 'Choose the starting age',
  values: [
    { value: 'child', name:  'Child',  description: 'Link will start off as Child' },
    { value: 'adult', name:  'Adult',  description: 'Link will start off as Adult' },
    { value: 'random', name: 'Random', description: 'Link will start off as either Adult or Child, with a 50/50 probability' },
  ],
  cond: hasOoT,
  default: 'child'
}, {
  key: 'swordlessAdult',
  name: 'Allow Adult Link to be swordless',
  category: 'main.events',
  type: 'boolean',
  description: 'Choose whether or not Adult Link can be swordless',
  cond: hasOoT,
  default: false
}, {
  key: 'timeTravelSword',
  name: 'Time Travel requires Master Sword',
  category: 'main.events',
  type: 'boolean',
  description: 'Choose whether or not Link needs the Master Sword to travel through time',
  default: true,
  cond: (s: any) => hasOoT(s) && s.swordlessAdult,
}, {
  key: 'doorOfTime',
  name: 'Door of Time',
  category: 'main.events',
  type: 'enum',
  description: 'Alters the Door of Time state',
  values: [
    { value: 'closed', name: 'Closed', description: 'The Door will be closed, and you will need to play Song of Time in front of the Temple of Time altar to open it. (The Spiritual Stones and Ocarina of Time are NOT needed)' },
    { value: 'open', name: 'Open', description: 'The Door is already open' },
  ],
  default: 'closed',
  cond: hasOoT,
}, {
  key: 'ageChange',
  name: 'Age Change upon Song of Time',
  category: 'main.events',
  type: 'enum',
  values: [
    { value: 'none', name: 'None', description: 'Cannot change age by playing Song of Time.' },
    { value: 'oot', name: 'Ocarina of Time', description: 'Can change age by playing Song of Time with the Ocarina of Time specifically.' },
    { value: 'always', name: 'Always', description: 'Can always change age by playing Song of Time.' },
  ],
  description: 'Allows you to switch ages by playing Song of Time, if you\'ve been to Temple of Time as both ages',
  default: 'none',
  cond: hasOoT,
}, {
  key: 'dekuTree',
  name: 'Deku Tree',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the behavior of Mido blocking the Deku Tree as Child',
  values: [
    { value: 'closed', name: 'Closed', description: 'Mido will block the way to the Deku Tree until you have a Deku Shield and the Kokiri Sword.' },
    { value: 'vanilla', name: 'Vanilla', description: 'Mido will block the way to the Deku Tree, but the tree itself will be open as Child.' },
    { value: 'open', name: 'Open', description: 'Mido will not block the way, the Deku Tree will be open from the start' },
  ],
  default: 'open',
  cond: hasOoT,
}, {
  key: 'openDungeonsOot',
  name: 'Open Dungeons (OoT)',
  category: 'main.events',
  type: 'set',
  description: 'Opens the entrance to the chosen dungeons',
  values: [
    { value: 'dekuTreeAdult', name: 'Deku Tree as Adult' },
    { value: 'wellAdult', name: 'Bottom of the Well as Adult' },
    { value: 'fireChild', name: 'Fire Temple as Child' },
    { value: 'DC', name: 'Dodongo\'s Cavern' },
    { value: 'BotW', name: 'Bottom of the Well' },
    { value: 'JJ', name: 'Jabu-Jabu' },
    { value: 'Shadow', name: 'Shadow Temple' },
    { value: 'Water', name: 'Water Temple' },
  ],
  default: 'none',
  cond: hasOoT,
}, {
  key: 'openDungeonsMm',
  name: 'Open Dungeons (MM)',
  category: 'main.events',
  type: 'set',
  description: 'Controls whether or not MM dungeons will need their respective song. Takes priority over Clear State',
  values: [
    { value: 'WF', name: 'Woodfall Temple' },
    { value: 'SH', name: 'Snowhead Temple' },
    { value: 'GB', name: 'Great Bay Temple' },
    { value: 'ST', name: 'Stone Tower Temple' },
  ],
  default: 'none',
  cond: hasMM,
}, {
  key: 'clearStateDungeonsMm',
  name: 'Clear State Dungeons (MM)',
  category: 'main.events',
  type: 'enum',
  description: 'Controls whether or not MM dungeons will need their respective songs in the cleared state',
  values: [
    { value: 'none', name: 'None' },
    { value: 'WF', name: 'Woodfall Temple' },
    { value: 'GB', name: 'Great Bay Temple' },
    { value: 'both', name: 'Both' },
  ],
  default: 'none',
  cond: hasMM,
}, {
  key: 'beneathWell',
  name: 'Beneath the Well behavior (MM)',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the behavior of the Gibdos in Beneath the Well',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'Nothing changes, Gibdos are back once you reset the cycle.' },
    { value: 'remorseless', name: 'Remorseless', description: 'Once you\'ve given a Gibdo its item, it is permanently gone, also affects the ending ladder and the sun block.' },
    { value: 'open', name: 'Open', description: 'All the Gibdos are already gone, also applies to the ending ladder and the sun block.' }
  ],
  default: 'vanilla',
  cond: hasMM,
}, {
  key: 'kakarikoGate',
  name: 'Kakariko Gate',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the behavior of the gate in Kakariko blocking Death Mountain as Child',
  values: [
    { value: 'closed', name: 'Closed', description: 'The gate will be closed until you show Zelda\'s Letter to the guard' },
    { value: 'open', name: 'Open', description: 'The gate will be open from the start' },
  ],
  default: 'closed',
  cond: hasOoT,
}, {
  key: 'openZdShortcut',
  name: 'Open Zora\'s Domain Shortcut',
  category: 'main.events',
  type: 'boolean',
  description: 'Removes the ice blocking Zora\'s Domain in Lake Hylia as Adult',
  default: false,
  cond: hasOoT,
}, {
  key: 'zoraKing',
  name: 'King Zora',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the behavior of King Zora in Zora\'s Domain',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'You will need to present him Ruto\'s Letter in order to enter Zora\'s Fountain as both Child and Adult' },
    { value: 'adult', name: 'Open (Adult Only)', description: 'Already on the side as Adult, granting free Zora\'s Fountain access. Child still needs Ruto\'s Letter' },
    { value: 'open', name: 'Open', description: 'He will already be on the side for both Child and Adult, and Ruto\'s Letter is replaced by an empty bottle' },
  ],
  default: 'vanilla',
  cond: hasOoT,
}, {
  key: 'gerudoFortress',
  name: 'Gerudo Fortress',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the behavior of the Carpenters in Gerudo Fortress',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'You will need to rescue all carpenters.' },
    { value: 'single', name: 'One Carpenter', description: 'You will need to rescue only one carpenter.' },
    { value: 'open', name: 'Open', description: 'Carpenters are rescued from the start and the bridge in Gerudo Valley as Adult is repaired.' },
  ],
  default: 'vanilla',
  cond: hasOoT,
}, {
  key: 'skipZelda',
  name: 'Skip Child Zelda',
  category: 'main.events',
  type: 'boolean',
  description: 'This changes the beginning of the Child trade quest.<br>True means you\'ll start having already met Zelda and got her item along with the one from Impa.<br>The Chicken is also removed from the game, but Malon will still be at Hyrule Castle',
  default: false,
  cond: hasOoT,
}, {
  key: 'openMoon',
  name: 'Skip Oath to Order',
  category: 'main.events',
  type: 'boolean',
  description: 'Skip playing Oath to Order to reach the Moon, by using a wisp placed on the Clock Tower Roof with this setting',
  default: false,
  cond: hasMM,
}, {
  key: 'lacs',
  name: 'Light Arrow Cutscene',
  category: 'main.events',
  type: 'enum',
  description: 'Controls how the Light Arrow Cutscene should be triggered',
  values: [
    { value: 'vanilla', name: 'Vanilla', description: 'Triggers at Temple of Time with Shadow and Spirit Medallions' },
    { value: 'custom', name: 'Custom', description: 'Triggers at Temple of Time with a special condition'},
  ],
  default: 'vanilla',
  cond: hasOoT,
}, {
  key: 'rainbowBridge',
  name: 'Rainbow Bridge',
  category: 'main.events',
  type: 'enum',
  description: 'Controls how the Rainbow Bridge should be triggered',
  values: [
    { value: 'open', name: 'Open', description: 'The Rainbow Bridge is always open' },
    { value: 'vanilla', name: 'Vanilla', description: 'Opens when you have the Light Arrows, Shadow Medallion, and Spirit Medallion' },
    { value: 'medallions', name: 'Medallions', description: 'Opens when you have all Medallions' },
    { value: 'custom', name: 'Custom', description: 'You will need to meet a special condition to open the bridge' },
  ],
  default: 'medallions',
  cond: hasOoT,
}, {
  key: 'majoraChild',
  name: 'Majora Child Requirements',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the requirements to enter Majora\'s arena',
  values: [
    { value: 'none', name: 'None', description: 'As soon as you have satisfied the "Moon Access" special condition you can enter Majora\'s arena' },
    { value: 'custom', name: 'Custom', description: 'You will need to meet the "Majora Child Requirements" special condition to enter Majora\'s arena' },
  ],
  default: 'none',
  cond: (s: any) => hasMM(s) && s.goal !== 'triforce' && s.goal !== 'triforce3',
}, {
  key: 'bossWarpPads',
  name: 'Boss Warp Pads',
  category: 'main.events',
  type: 'enum',
  description: 'Controls the behavior of the MM Boss Warp Pads.',
  values: [
    { value: 'bossBeaten', name: 'Boss Beaten', description: 'Enabled when the boss is beaten' },
    { value: 'remains', name: 'Remains', description: 'Enabled when the matching remains are obtained' },
  ],
  default: 'bossBeaten',
  cond: hasMM,
}, {
  key: 'regionState',
  name: 'Region State Behavior',
  category: 'main.events',
  type: 'enum',
  description: 'Controls what is required to change the region state.',
  values: [
    { value: 'dungeonBeaten', name: 'Dungeon Beaten', description: 'Enabled when the dungeon is beaten.' },
    //{ value: 'bossBeaten', name: 'Boss Beaten', description: 'Enabled when the boss is beaten.' },
    { value: 'reward', name: 'Rewards', description: 'Enabled when the matching dungeon reward is obtained' },
    { value: 'free', name: 'Free', description: 'Always enabled' },
  ],
  default: 'dungeonBeaten',
}, {
  key: 'freeScarecrowOot',
  name: 'Free Scarecrow (OoT)',
  category: 'main.events',
  type: 'boolean',
  description: 'Allows to spawn Pierre the Scarecrow just by pulling the Ocarina out',
  default: false,
  cond: hasOoT,
}, {
  key: 'freeScarecrowMm',
  name: 'Free Scarecrow (MM)',
  category: 'main.events',
  type: 'boolean',
  description: 'Allows to spawn the Scarecrow just by pulling the Ocarina out',
  default: false,
  cond: hasMM,
}, {
  key: 'strayFairyRewardCount',
  name: 'Stray Fairy Reward Count',
  category: 'main.events',
  type: 'number',
  description: 'How many stray fairies are required to get the respective Great Fairy reward.',
  default: 15,
  min: 0,
  max: 15,
  cond: hasMM,
}, {
  key: 'preCompletedDungeons',
  name: 'Pre-Completed Dungeons',
  category: 'main.events',
  type: 'boolean',
  description: 'Allow dungeons to be pre-completed depending on rules.<br>Every check in a pre-completed dungeon will be junked, and its boss will be considered defeated, granting clear state access.',
  default: false,
  cond: (s: any) => (s.mode !== 'multi' || s.distinctWorlds),
}, {
  key: 'preCompletedDungeonsMajor',
  name: 'Pre-Completed Dungeons (Major)',
  category: 'main.events',
  type: 'number',
  min: 0,
  max: 12,
  description: 'How many major dungeons should be pre-completed.<br>Can be combined with other pre-completed dungeon rules.',
  default: 0,
  cond: (s: any) => s.preCompletedDungeons,
}, {
  key: 'preCompletedDungeonsStones',
  name: 'Pre-Completed Dungeons (Stones)',
  category: 'main.events',
  type: 'number',
  min: 0,
  max: 3,
  description: 'How many OoT Child dungeons containing stones should be pre-completed.<br>Can be combined with other pre-completed dungeon rules.',
  default: 0,
  cond: (s: any) => hasOoT(s) && s.preCompletedDungeons,
}, {
  key: 'preCompletedDungeonsMedallions',
  name: 'Pre-Completed Dungeons (Medallions)',
  category: 'main.events',
  type: 'number',
  min: 0,
  max: 6,
  description: 'How many OoT Adult dungeons containing medaillons should be pre-completed.<br>Can be combined with other pre-completed dungeon rules.',
  default: 0,
  cond: (s: any) => hasOoT(s) && s.preCompletedDungeons,
}, {
  key: 'preCompletedDungeonsRemains',
  name: 'Pre-Completed Dungeons (Remains)',
  category: 'main.events',
  type: 'number',
  min: 0,
  max: 4,
  description: 'How many MM dungeons containing remains should be pre-completed. Stone Tower Temple and Inverted Stone Tower Temple are considered one dungeon.<br>Can be combined with other pre-completed dungeon rules.',
  default: 0,
  cond: (s: any) => hasMM(s) && s.preCompletedDungeons,
}, {
  key: 'ootPreplantedBeans',
  name: 'Pre-Planted Beans (OoT)',
  category: 'main.events',
  type: 'boolean',
  description: 'Automatically plants beans in the various soft soils of OoT, as well as removing the beans from the item pool',
  default: false,
  cond: hasOoT,
}, {
  key: 'mmPreActivatedOwls',
  name: 'Pre-Activated Owl Statues',
  category: 'main.events',
  type: 'set',
  description: 'Automatically activates Owl Statues on your behalf, and you will also get the items at their location',
  values: [
    { value: 'clocktown', name: 'Clock Town' },
    { value: 'milkroad',  name: 'Milk Road' },
    { value: 'swamp',     name: 'Southern Swamp' },
    { value: 'woodfall',  name: 'Woodfall' },
    { value: 'mountain',  name: 'Mountain Village' },
    { value: 'snowhead',  name: 'Snowhead' },
    { value: 'greatbay',  name: 'Great Bay Coast' },
    { value: 'zoracape',  name: 'Zora Cape' },
    { value: 'canyon',    name: 'Ikana Canyon' },
    { value: 'tower',     name: 'Stone Tower' },
  ],
  default: 'none',
  cond: hasMM,
}, {
  key: 'crossAge',
  name: 'Cross-Games Age',
  category: 'main.cross',
  type: 'boolean',
  description: 'When you enter MM as Adult Link, you will be Adult Link in MM.',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'crossWarpOot',
  name: 'Cross-Games OoT Warp Songs',
  category: 'main.cross',
  type: 'boolean',
  description: 'Allows you to play OoT Warp Songs from MM to warp to their respective locations, which can be logical.',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'crossWarpMm',
  name: 'Cross-Games MM Song of Soaring',
  category: 'main.cross',
  type: 'enum',
  description: 'Controls whether you can play Song of Soaring from OoT to warp to MM Owl Statues and how logic should be affected',
  values: [
    { value: 'none', name: 'None', description: 'Song of Soaring is fully disabled in OoT' },
    { value: 'childOnly', name: 'Child Only', description: 'Song of Soaring in OoT is enabled and logical only for Child' },
    { value: 'full', name: 'Child & Adult', description: 'Song of Soaring in OoT is enabled and logical for both Child and Adult' },
  ],
  default: 'none',
  cond: hasOoTMM,
}, {
  key: 'crossGameFw',
  name: 'Cross-Games Farore\'s Wind',
  category: 'main.cross',
  type: 'boolean',
  description: 'Controls whether you can use Farore\'s Wind to warp between OoT and MM.',
  default: false,
  cond: (x: any) => hasOoTMM(x) && x.spellWindMm,
}, {
  key: 'csmc',
  name: 'Container Appearance Matches Content',
  category: 'main.camc',
  type: 'enum',
  values: [
    { value: 'never',  name: 'Never', description: 'Containers will be vanilla' },
    { value: 'agony',  name: 'Stone of Agony', description: 'Containers will match content when you have the Stone of Agony in OoT' },
    { value: 'always', name: 'Always', description: 'Containers will always match content' },
  ],
  description: 'Modifies the appearance of chests and other shuffled containers so that they match their content.<br>Other shuffled containers will otherwise always be gold if the item has not been collected.<br>Works for unique items, Small and Boss Keys, Silver Rupees, Stray Fairies, Skulltula Tokens, and Souls',
  default: 'always'
}, {
  key: 'csmcHearts',
  name: 'CAMC for Heart Pieces/Containers',
  category: 'main.camc',
  type: 'boolean',
  default: true,
  description: 'Use a specific texture for Heart Pieces/Containers',
  cond: (x: any) => x.csmc !== 'never',
}, {
  key: 'csmcMapCompass',
  name: 'CAMC for Maps/Compasses',
  category: 'main.camc',
  type: 'boolean',
  default: true,
  description: 'Use a specific texture for Maps/Compasses',
  cond: (x: any) => x.csmc !== 'never',
}, {
  key: 'csmcSkulltula',
  name: 'Skulltula CAMC',
  category: 'main.camc',
  type: 'boolean',
  default: false,
  description: 'Enables CAMC for shuffled Gold, Swamp, and Ocean Skulltulas',
  cond: (x: any) => x.csmc !== 'never',
}, {
  key: 'csmcCow',
  name: 'Cow CAMC',
  category: 'main.camc',
  type: 'boolean',
  default: false,
  description: 'Enables CAMC for shuffled Cows',
  cond: (x: any) => x.csmc !== 'never',
}, {
  key: 'cloakIceTraps',
  name: 'Cloak Ice Traps',
  category: 'main.misc',
  type: 'boolean',
  default: true,
  description: 'Makes Ice Traps look like different items.',
  cond: hasOoT,
}, {
  key: 'blastMaskCooldown',
  name: 'Blast Mask Cooldown',
  category: 'main.misc',
  type: 'enum',
  description: 'Changes the cooldown between each explosion of the Blast Mask',
  values: [
    { value: 'instant', name: 'Instant (0s)' },
    { value: 'veryshort', name: 'Very Short (~2s)' },
    { value: 'short', name: 'Short (~6s)' },
    { value: 'default', name: 'Default (~15s)' },
    { value: 'long', name: 'Long (~25s)' },
    { value: 'verylong', name: 'Very Long (~51s)' },
  ],
  default: 'default',
  cond: (s: any) => hasMM(s) || s.blastMaskOot,
}, {
  key: 'clockSpeed',
  name: 'Clock Speed',
  category: 'main.misc',
  type: 'enum',
  description: 'Alters the speed of the clock. Some options may render seeds unbeatable due to being unable to do time-related checks',
  values: [
    { value: 'veryslow', name: 'Very Slow', description: 'The time will flow 66% slower than usual' },
    { value: 'slow', name: 'Slow', description: 'The time will flow 33% slower than usual' },
    { value: 'default', name: 'Default', description: 'The normal clock speed' },
    { value: 'fast', name: 'Fast', description: 'The clock speed will be twice as fast than usual' },
    { value: 'veryfast', name: 'Very Fast', description: 'USE AT OWN RISK!! - The clock speed will be 3x faster than usual, even on inverted' },
    { value: 'superfast', name: 'Super Fast', description: 'USE AT OWN RISK!! - The clock speed will be 6x faster than usual, even on inverted' },
  ],
  default: 'default',
  cond: hasMM,
}, {
  key: 'fierceDeityAnywhere',
  name: 'Fierce Deity Anywhere in MM',
  category: 'main.misc',
  type: 'boolean',
  description: 'Controls the ability to use Fierce Deity outside of boss lairs. No logical applications',
  default: false,
  cond: hasMM,
}, {
  key: 'hookshotAnywhereOot',
  name: 'Hookshot Anywhere (OoT)',
  category: 'main.misc',
  type: 'enum',
  description: 'Modifies all surfaces to be able to be hooked onto and if it is expected in logic',
  values: [
    { value: 'off', name: 'Off' },
    { value: 'enabled', name: 'On' },
    { value: 'logical', name: 'Logical' },
  ],
  default: 'off',
  cond: hasOoT,
}, {
  key: 'hookshotAnywhereMm',
  name: 'Hookshot Anywhere (MM)',
  category: 'main.misc',
  type: 'enum',
  description: 'Modifies all surfaces to be able to be hooked onto and if it is expected in logic',
  values: [
    { value: 'off', name: 'Off' },
    { value: 'enabled', name: 'On' },
    { value: 'logical', name: 'Logical' },
  ],
  default: 'off',
  cond: hasMM,
}, {
  key: 'climbMostSurfacesOot',
  name: 'Climb Most Surfaces (OoT)',
  category: 'main.misc',
  type: 'enum',
  description: 'Modifies most surfaces to be climbable and if it is expected in logic',
  values: [
    { value: 'off', name: 'Off' },
    { value: 'enabled', name: 'On' },
    { value: 'logical', name: 'Logical' },
  ],
  default: 'off',
  cond: hasOoT,
}, {
  key: 'climbMostSurfacesMm',
  name: 'Climb Most Surfaces (MM)',
  category: 'main.misc',
  type: 'boolean',
  description: 'Modifies most surfaces to be climbable',
  default: false,
  cond: hasMM,
}, {
  key: 'restoreBrokenActors',
  name: 'Restore Broken Actors',
  category: 'main.misc',
  type: 'boolean',
  description: 'In vanilla OoT, some actors fails to load properly in some rooms due to errors in the room files. When this is on, these actors will load.',
  default: false,
  cond: hasOoT,
}, {
  key: 'alterLostWoodsExits',
  name: 'Alter Lost Woods Exits',
  category: 'main.misc',
  type: 'boolean',
  description: 'There are unused exits in the Lost Woods that return you back to the Lost Woods.<br>When this is on, all the "got lost" exits in the Lost Woods that would normally take you to Kokiri Forest instead take you back to the Lost Woods, keeping your compass direction intact.',
  default: false,
  cond: hasOoT,
}, {
  key: 'voidWarpMm',
  name: 'Void Warp in MM',
  category: 'main.misc',
  type: 'boolean',
  description: 'In vanilla OoT, various code only checks for transitionTrigger, but in MM it also checks for transitionMode.<br>When this is on, MM will no longer check transitionMode in those circumstances, allowing you to perform the Void Warp glitch in MM.',
  default: false,
  cond: hasMM,
}, {
  key: 'progressiveShieldsOot',
  name: 'OoT Shields',
  category: 'items.progressive',
  type: 'enum',
  description: 'Alters the behavior of the OoT Shields',
  values: [
    { value: 'separate', name: 'Separate', description: 'They can be found independently from each other' },
    { value: 'progressive', name: 'Progressive', description: 'Each Progressive Shield will grant you the next one: Deku Shield -> Hylian Shield -> Mirror Shield. Other Deku and Hylian Shields are removed from the item pool.' },
  ],
  default: 'separate',
  cond: hasOoT,
}, {
  key: 'progressiveSwordsOot',
  name: 'OoT Swords',
  category: 'items.progressive',
  type: 'enum',
  description: 'Alters the behavior of the OoT Swords',
  values: [
    { value: 'separate', name: 'Separate', description: 'They can be found independently from each other' },
    { value: 'goron', name: 'Progressive Knife and Biggoron', description: 'Kokiri Sword and Master Sword are independent. However, Giant\'s Knife and Biggoron Sword are progressive.' },
    { value: 'progressive', name: 'Progressive', description: 'Each Progressive Sword will grant you the next one: Kokiri Sword -> Master Sword -> Giant\'s Knife -> Biggoron Sword' },
  ],
  default: 'goron',
  cond: hasOoT,
}, {
  key: 'progressiveShieldsMm',
  name: 'MM Shields',
  category: 'items.progressive',
  type: 'enum',
  description: 'Alters the behavior of the MM Shields',
  values: [
    { value: 'separate', name: 'Separate', description: 'They can be found independently from each other' },
    { value: 'progressive', name: 'Progressive', description: 'Each Progressive Shield will grant you the next one: Hero\'s Shield -> Mirror Shield. Other Hero\'s Shields are removed from the item pool.' },
  ],
  default: 'separate',
  cond: hasMM,
}, {
  key: 'progressiveGFS',
  name: 'MM Great Fairy Sword',
  category: 'items.progressive',
  type: 'enum',
  description: 'Controls whether the Great Fairy Sword is included in sword progression',
  values: [
    { value: 'separate', name: 'Separate' },
    { value: 'progressive', name: 'Progressive' },
  ],
  default: 'separate',
  cond: hasMM,
}, {
  key: 'progressiveGoronLullaby',
  name: 'MM Goron Lullaby',
  category: 'items.progressive',
  type: 'enum',
  description: 'Alters the behavior of the Goron Lullaby',
  values: [
    { value: 'single', name: 'Full Lullaby Only', description: 'Only the Goron Lullaby can be found, and when playing with Songs on Song Locations, Baby Goron in MM is no longer a Song Location' },
    { value: 'progressive', name: 'Progressive', description: 'The Lullaby Intro will be received first before getting the full song' },
  ],
  default: 'progressive',
  cond: hasMM,
}, {
  key: 'progressiveClocks',
  name: 'Clocks',
  category: 'items.progressive',
  type: 'enum',
  description: 'Alters the behavior of Clocks',
  values: [
    { value: 'separate', name: 'Separate', description: 'Clocks will be independent of each other. If you don\'t select a starting clock, you start with a random clock.' },
    { value: 'ascending', name: 'Ascending', description: 'Clocks will be received in ascending order, with Day 1 already unlocked.' },
    { value: 'descending', name: 'Descending ', description: 'Clocks will be received in descending order, with Night 3 already unlocked.' },
  ],
  default: 'ascending',
  cond: (s: any) => s.clocks,
}, {
  key: 'fillWallets',
  name: 'Fill Wallets',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Fills the wallet upon finding a new one',
  default: false
}, {
  key: 'bottleContentShuffle',
  name: 'Random Bottle Contents',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Randomize what bottles from both games contain upon finding them in the world',
  default: false
}, {
  key: 'stoneAgonyMm',
  name: 'Stone of Agony in MM',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Enables Stone of Agony in MM',
  default: false,
  cond: hasMM,
}, {
  key: 'sticksNutsUpgradesMm',
  name: 'Deku Stick & Nut Upgrades in MM',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Enables Deku Stick and Nut upgrades in MM',
  default: false,
  cond: hasMM,
}, {
  key: 'sunSongMm',
  name: 'Sun\'s Song in MM',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Enables Sun\'s Song as an item in MM. If Songs are on Song Locations, you must share or start with at least one song',
  default: false,
  cond: hasMM,
}, {
  key: 'fairyOcarinaMm',
  name: 'Fairy Ocarina in MM',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Functionally identical as the Ocarina of Time, but now there\'s 2 Ocarinas for Majora\'s Mask!',
  default: false,
  cond: hasMM,
}, {
  key: 'blueFireArrows',
  name: 'Blue Fire Arrows',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Gives the OoT Ice Arrows the properties of Blue Fire',
  default: false,
  cond: hasOoT,
}, {
  key: 'sunlightArrows',
  name: 'Sunlight Arrows',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Gives the OoT Light Arrows the ability to activate most sun switches',
  default: false,
  cond: hasOoT,
}, {
  key: 'shortHookshotMm',
  name: 'Short Hookshot in MM',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Adds a short Hookshot in MM, which logic accounts for. A trick is also there for some of the harder spots',
  default: false,
  cond: hasMM,
}, {
  key: 'bronzeScale',
  name: 'Bronze Scale',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add an extra scale item, that is required to enter deep water.',
  default: false,
  cond: (s: any) => (hasOoT(s) || s.scalesMm) && false, /* TODO: Enable once logic is ready */
}, {
  key: 'childWallets',
  name: 'Child Wallets',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Shuffles the starting wallet in each game... making it so you have to find it to hold anything!',
  default: false
}, {
  key: 'colossalWallets',
  name: 'Colossal Wallets',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Adds a Wallet that can hold up to 999 rupees in each game',
  default: false
}, {
  key: 'bottomlessWallets',
  name: 'Bottomless Wallets',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Adds a Wallet that can hold up to 9999 rupees in each game',
  default: false,
  cond: (s: any) => s.colossalWallets,
}, {
  key: 'rupeeScaling',
  name: 'Rupee Scaling',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Makes rupees worth twice as much with the Colossal Wallet, and twenty times as much with the Bottomless Wallet.',
  default: false,
  cond: (s: any) => s.colossalWallets,
}, {
  key: 'skeletonKeyOot',
  name: 'Skeleton Key (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Adds a Skeleton Key that can open every small-key-locked door in OoT.',
  default: false,
  cond: hasOoT,
}, {
  key: 'skeletonKeyMm',
  name: 'Skeleton Key (MM)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Adds a Skeleton Key that can open every small-key-locked door in MM.',
  default: false,
  cond: hasMM,
}, {
  key: 'magicalRupee',
  name: 'Magical Rupee',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Adds a Magical Rupee that can trigger every silver-rupee event in OoT dungeons.',
  default: false,
  cond: (s: any) => s.silverRupeeShuffle !== 'vanilla',
}, {
  key: 'bombchuBehaviorOot',
  name: 'Bombchu Behavior (OoT)',
  category: 'items.extensions',
  type: 'enum',
  values: [
    { value: 'free', name: 'Free', description: 'Bombchu can be used as soon as they are obtained. Max ammo is 50.' },
    { value: 'bombBag', name: 'Bomb Bag', description: 'Bombchu can be used when you have the Bomb Bag. Max ammo is the Bomb Bag maximum.' },
    { value: 'bagFirst', name: 'Bombchu Bag - First Pack', description: 'The first out-of-shop bombchu you find will turn into a Bombchu Bag. Max ammo is 50.' },
    { value: 'bagSeparate', name: 'Bombchu Bag - Separate Items', description: 'Bombchu Bags separate from bombchu are added to the item pool. Without the Bombchu Bag, bombchu cannot be used. Max ammo is 20/30/40 each.' },
  ],
  description: 'Controls the behavior of bombchu.<br>Bombchu Bags allow bombchu refills to drop from item refill locations such as grass and pots, making bombchu logical.<br>With Bombchu Bags disabled, access to a renewable source of bombchu is required in order for bombchu to be logical.',
  default: 'free',
  cond: hasOoT,
}, {
  key: 'bombchuBehaviorMm',
  name: 'Bombchu Behavior (MM)',
  category: 'items.extensions',
  type: 'enum',
  values: [
    { value: 'free', name: 'Free', description: 'Bombchu can be used as soon as they are obtained. Max ammo is 50.' },
    { value: 'bombBag', name: 'Bomb Bag', description: 'Bombchu can be used when you have the Bomb Bag. Max ammo is the Bomb Bag maximum.' },
    { value: 'bagFirst', name: 'Bombchu Bag - First Pack', description: 'The first out-of-shop bombchu you find will turn into a Bombchu Bag. Max ammo is 50.' },
    { value: 'bagSeparate', name: 'Bombchu Bag - Separate Items', description: 'Bombchu Bags separate from bombchu are added to the item pool. Without the Bombchu Bag, bombchu cannot be used. Max ammo is 20/30/40 each.' },
  ],
  description: 'Controls the behavior of bombchu.<br>Bombchu Bags allow bombchu refills to drop from item refill locations such as grass and pots, making bombchu logical.<br>With Bombchu Bags disabled, access to a renewable source of bombchu is required in order for bombchu to be logical.',
  default: 'bombBag',
  cond: hasMM,
}, {
  key: 'spellFireMm',
  name: "Din's Fire (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds Din's Fire in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'spellWindMm',
  name: "Farore's Wind (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds Farore's Wind in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'spellLoveMm',
  name: "Nayru's Love (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds Nayru's Love in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'bootsIronMm',
  name: "Iron Boots (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds Iron Boots in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'bootsHoverMm',
  name: "Hover Boots (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds Hover Boots in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'tunicGoronMm',
  name: "Goron Tunic (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds the Goron Tunic in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'tunicZoraMm',
  name: "Zora Tunic (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds the Zora Tunic in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'scalesMm',
  name: "Scales (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds the Silver Scale and Golden Scale in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'strengthMm',
  name: "Strength (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds the Goron's Bracelet, Silver Gauntlets and Golden Gauntlets in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'kegStrength3',
  name: "Use Keg With Golden Gauntlets",
  category: 'items.extensions',
  type: 'boolean',
  description: "If you have the Golden Gauntlets in Majora's Mask, this allows you to purchase and use Powder Kegs, and attempt the Keg Trial.",
  default: false,
  cond: (x: any) => x.strengthMm && hasMM(x),
}, {
  key: 'hammerMm',
  name: "Megaton Hammer (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Adds the Megaton Hammer in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'spinUpgradeOot',
  name: "Spin Attack Upgrade (OoT)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Add the Spin Attack upgrade as an item in OoT.",
  default: false,
  cond: hasOoT,
}, {
  key: 'extraChildSwordsOot',
  name: "Extra Child Swords (OoT)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Add the Razor and Gilded Swords in OoT, as upgrades to the Kokiri Sword.",
  default: false,
  cond: (x: any) => x.progressiveSwordsOot !== 'progressive' && hasOoT(x),
}, {
  key: 'dekuShieldMm',
  name: "Deku Shield (MM)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Add the Deku Shield in Majora's Mask.",
  default: false,
  cond: hasMM,
}, {
  key: 'blastMaskOot',
  name: "Blast Mask (OoT)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Add the Blast Mask in Ocarina of Time.",
  default: false,
  cond: hasOoT,
}, {
  key: 'stoneMaskOot',
  name: "Stone Mask (OoT)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Add the Stone Mask in Ocarina of Time.",
  default: false,
  cond: hasOoT,
}, {
  key: 'elegyOot',
  name: "Elegy of Emptiness (OoT)",
  category: 'items.extensions',
  type: 'boolean',
  description: "Add the Elegy of Emptiness in Ocarina of Time. If Songs are on Song Locations, you must share or start with at least one song",
  default: false,
  cond: hasOoT,
}, {
  key: 'ocarinaButtonsShuffleOot',
  name: 'Ocarina Buttons (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add the Ocarina Buttons for OoT into the item pool. Ocarina notes cannot be played until the corresponding button is obtained.',
  default: false,
  cond: hasOoT,
}, {
  key: 'ocarinaButtonsShuffleMm',
  name: 'Ocarina Buttons (MM)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add the Ocarina Buttons for MM into the item pool. Ocarina notes cannot be played until the corresponding button is obtained.',
  default: false,
  cond: hasMM,
}, {
  key: 'soulsEnemyOot',
  name: 'Enemy Souls (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for OoT enemies into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasOoT,
}, {
  key: 'soulsEnemyMm',
  name: 'Enemy Souls (MM)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for MM enemies into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasMM,
}, {
  key: 'soulsBossOot',
  name: 'Boss Souls (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for OoT bosses into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasOoT,
}, {
  key: 'soulsBossMm',
  name: 'Boss Souls (MM)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for MM bosses into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasMM,
}, {
  key: 'soulsNpcOot',
  name: 'NPC Souls (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for OoT NPCs into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasOoT,
}, {
  key: 'soulsNpcMm',
  name: 'NPC Souls (MM)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for MM NPCs into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasMM,
}, {
  key: 'soulsMiscOot',
  name: 'Misc. Souls (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for OoT Business Scrubs and Gold Skulltulas into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasOoT,
}, {
  key: 'soulsMiscMm',
  name: 'Misc. Souls (MM)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Souls for MM Business Scrubs and Gold Skulltulas into the item pool. They won\'t spawn unless their Soul is obtained.',
  default: false,
  cond: hasMM,
}, {
  key: 'clocks',
  name: 'Clocks as Items',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add items representing every Majora\'s Mask day and night into the pool. The moon will crash early unless you collect these items.',
  default: false,
  cond: hasMM,
}, {
  key: 'menuNotebook',
  name: 'Bombers\' Tracker',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Locks the in-game tracker behind the Bombers\' Notebook',
  default: false,
  cond: hasMM,
}, {
  key: 'coins',
  name: 'Coins',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Enable the leftover Coin items. These can be used for special conditions',
  default: false
}, {
  key: 'coinsRed',
  name: 'Red Coins',
  category: 'items.extensions',
  type: 'number',
  description: 'How many Red Coins to add to the item pool',
  cond: (s: any) => s.coins,
  default: 0,
  min: 0,
  max: 999,
}, {
  key: 'coinsGreen',
  name: 'Green Coins',
  category: 'items.extensions',
  type: 'number',
  description: 'How many Green Coins to add to the item pool',
  cond: (s: any) => s.coins,
  default: 0,
  min: 0,
  max: 999,
}, {
  key: 'coinsBlue',
  name: 'Blue Coins',
  category: 'items.extensions',
  type: 'number',
  description: 'How many Blue Coins to add to the item pool',
  cond: (s: any) => s.coins,
  default: 0,
  min: 0,
  max: 999,
}, {
  key: 'coinsYellow',
  name: 'Yellow Coins',
  category: 'items.extensions',
  type: 'number',
  description: 'How many Yellow Coins to add to the item pool',
  cond: (s: any) => s.coins,
  default: 0,
  min: 0,
  max: 999,
}, {
  key: 'trapRupoor',
  name: 'Rupoors',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Add Rupoors to the item pool. They remove 10 rupees when collected',
  default: false
}, {
  key: 'songOfDoubleTimeOot',
  name: 'Song of Double Time (OoT)',
  category: 'items.extensions',
  type: 'boolean',
  description: 'Enables using Song of Double Time in OoT when you have the Song of Time in OoT',
  default: false,
  cond: hasOoT
}, {
  key: 'sharedStoneAgony',
  name: 'Shared Stone of Agony',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Stones of Agony from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.stoneAgonyMm,
}, {
  key: 'sharedSpinUpgrade',
  name: 'Shared Spin Attack Upgrade',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Spin Attack Upgrades from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.spinUpgradeOot,
}, {
  key: 'sharedNutsSticks',
  name: 'Shared Deku Sticks & Nuts',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Deku Stick and Nut Upgrades from OoT and MM into two items each for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.sticksNutsUpgradesMm,
}, {
  key: 'sharedBows',
  name: 'Shared Bows',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Bows from OoT and MM into three progressive items for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedBombBags',
  name: 'Shared Bomb Bags',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Bomb Bags from OoT and MM into three progressive items for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMagic',
  name: 'Shared Magic',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Magic Upgrades from OoT and MM into two progressive items for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMagicArrowFire',
  name: 'Shared Fire Arrows',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Fire Arrows from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMagicArrowIce',
  name: 'Shared Ice Arrows',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Ice Arrows from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMagicArrowLight',
  name: 'Shared Light Arrows',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Light Arrows from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedSongEpona',
  name: 'Shared Epona\'s Song',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Epona\'s Song from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedSongStorms',
  name: 'Shared Song of Storms',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Song of Storms from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedSongTime',
  name: 'Shared Song of Time',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Song of Time from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedSongSun',
  name: 'Shared Sun\'s Song',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Sun\'s Song from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.sunSongMm,
}, {
  key: 'sharedHookshot',
  name: 'Shared Hookshots',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Hookshots from OoT and MM into two progressive items for both games.<br>If "Short Hookshot in MM" is disabled, the MM Hookshot will be given along with the first progressive item.',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedLens',
  name: 'Shared Lens of Truth',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Lenses of Truth from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedOcarina',
  name: 'Shared Ocarinas',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Ocarinas from OoT and MM into two progressive items for both games.<br>If "Fairy Ocarina in MM" is disabled, the MM Ocarina will be given along with the second progressive item.',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMaskGoron',
  name: 'Shared Goron Mask',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Goron Masks from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMaskZora',
  name: 'Shared Zora Mask',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Zora Masks from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMaskBunny',
  name: 'Shared Bunny Hood',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Bunny Hoods from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMaskKeaton',
  name: 'Shared Keaton Mask',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Keaton Masks from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMaskTruth',
  name: 'Shared Mask of Truth',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Masks of Truth from OoT and MM into one item for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedMaskBlast',
  name: 'Shared Blast Mask',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Blast Masks from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.blastMaskOot,
}, {
  key: 'sharedMaskStone',
  name: 'Shared Stone Mask',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Stone Masks from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.stoneMaskOot,
}, {
  key: 'sharedSongElegy',
  name: 'Shared Elegy of Emptiness',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Elegies of Emptiness from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.elegyOot,
}, {
  key: 'sharedWallets',
  name: 'Shared Wallets',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Wallets from OoT and MM into multiple progressive items for both games, depending on settings',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedHealth',
  name: 'Shared Health',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Heart Pieces, Heart Containers and Double Defenses from OoT and MM into 44 Heart Pieces, 6 Heart Containers and one Double Defense for both games',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'sharedSwords',
  name: 'Shared Child Swords',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Kokiri, Razor and Gilded Swords from OoT and MM into three progressive items for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.extraChildSwordsOot && s.progressiveGFS !== 'progressive',
}, {
  key: 'sharedShields',
  name: 'Shared Shields',
  category: 'items.shared',
  type: 'boolean',
  description: 'When you obtain a shield, the opposite game\'s equivalent is given to you as well. With this, the Hylian and Hero\'s Shields are considered equivalent.<br>If Shields are Progressive, all Shields are combined into three progressive items: Deku Shield -> Hylian/Hero\'s Shield -> Mirror Shield',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.progressiveShieldsOot === s.progressiveShieldsMm,
}, {
  key: 'sharedSoulsEnemy',
  name: 'Shared Enemy Souls',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the OoT and MM Souls for a specific enemy into one item, for all enemies present in both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.soulsEnemyOot && s.soulsEnemyMm,
}, {
  key: 'sharedSoulsNpc',
  name: 'Shared NPC Souls',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the OoT and MM Souls for a specific NPC into one item, for all NPCs present in both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.soulsNpcOot && s.soulsNpcMm,
}, {
  key: 'sharedSoulsMisc',
  name: 'Shared Misc. Souls',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the OoT and MM Souls for Business Scrubs and Gold Skulltulas into two items for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.soulsMiscOot && s.soulsMiscMm,
}, {
  key: 'sharedOcarinaButtons',
  name: 'Shared Ocarina Buttons',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Ocarina Buttons from OoT and MM into five items for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.ocarinaButtonsShuffleOot && s.ocarinaButtonsShuffleMm,
}, {
  key: 'sharedSkeletonKey',
  name: 'Shared Skeleton Key',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Skeleton Key from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.skeletonKeyOot && s.skeletonKeyMm,
}, {
  key: 'sharedBombchu',
  name: 'Shared Bombchu',
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines either Bombchu or the Bombchu Bags from OoT and MM into items for both games, depending on settings',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.bombchuBehaviorOot === s.bombchuBehaviorMm && (s.bombchuBehaviorOot !== 'bombBag' || s.sharedBombBags),
}, {
  key: 'sharedSpellFire',
  name: "Shared Din's Fire",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Din\'s Fire from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.spellFireMm,
}, {
  key: 'sharedSpellWind',
  name: "Shared Farore's Wind",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Farore\'s Wind from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.spellWindMm,
}, {
  key: 'sharedSpellLove',
  name: "Shared Nayru's Love",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines Nayru\'s Love from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.spellLoveMm,
}, {
  key: 'sharedBootsIron',
  name: "Shared Iron Boots",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Iron Boots from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.bootsIronMm,
}, {
  key: 'sharedBootsHover',
  name: "Shared Hover Boots",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Hover Boots from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.bootsHoverMm,
}, {
  key: 'sharedTunicGoron',
  name: "Shared Goron Tunic",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Goron Tunics from OoT and MM into two items for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.tunicGoronMm,
}, {
  key: 'sharedTunicZora',
  name: "Shared Zora Tunic",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Zora Tunics from OoT and MM into two items for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.tunicZoraMm,
}, {
  key: 'sharedScales',
  name: "Shared Scales",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Scales from OoT and MM into multiple progressive items for both games, depending on settings', //prep for Bronze Scale
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.scalesMm,
}, {
  key: 'sharedStrength',
  name: "Shared Strength",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Strength Upgrades from OoT and MM into three progressive items for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.strengthMm,
}, {
  key: 'sharedHammer',
  name: "Shared Megaton Hammer",
  category: 'items.shared',
  type: 'boolean',
  description: 'Combines the Megaton Hammers from OoT and MM into one item for both games',
  default: false,
  cond: (s: any) => hasOoTMM(s) && s.hammerMm,
}, {
  key: 'agelessSwords',
  name: 'Ageless Swords',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use swords independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessShields',
  name: 'Ageless Shields',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use shields independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessTunics',
  name: 'Ageless Tunics',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use tunics independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessBoots',
  name: 'Ageless Boots',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use boots independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessSticks',
  name: 'Ageless Sticks',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use Deku Sticks independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessBoomerang',
  name: 'Ageless Boomerang',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use the Boomerang independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessHammer',
  name: 'Ageless Hammer',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use the Hammer independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessHookshot',
  name: 'Ageless Hookshot',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use the Hookshot independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessSlingshot',
  name: 'Ageless Slingshot',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use the Slingshot independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessBow',
  name: 'Ageless Bow',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use the Bow independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessChildTrade',
  name: 'Ageless Child Trade',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Link to use the Child trade items independently of his age',
  default: false,
  cond: hasOoT,
}, {
  key: 'agelessStrength',
  name: 'Ageless Strength',
  category: 'items.ageless',
  type: 'boolean',
  description: 'Allows Child Link to use the Adult Strength upgrades',
  default: false,
  cond: hasOoT,
}, {
  key: 'erSelfLoops',
  name: 'Allow Self-Loops',
  category: 'entrances',
  type: 'boolean',
  description: 'Allow entrances to loop back to the same map. Might make the topology of the world very confusing.',
  default: false,
}, {
  key: 'erNoPolarity',
  name: 'No Entrance Polarity',
  category: 'entrances',
  type: 'boolean',
  description: 'Some entrances have a polarity, for example dungeon entrances and exits.<br>Normally, they\'re shuffled respecting that polarity, so a dungeon entrance will always lead to the inside of a dungeon, never to a dungeon exit. This option disables that.',
  default: false,
}, {
  key: 'erDecoupled',
  name: 'Decoupled Entrances',
  category: 'entrances',
  type: 'boolean',
  description: 'Makes the entrances decoupled from the exits.<br>This means that entering and exiting an area does not lead you back to where you came from, but to a different location instead.',
  default: false,
}, {
  key: 'erBoss',
  name: 'Boss Entrance Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  description: 'Shuffle bosses either within their own game or across both',
  default: 'none'
}, {
  key: 'erDungeons',
  name: 'Dungeon Entrance Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  description: 'Shuffle dungeons either within their own game or across both',
  default: 'none'
}, {
  key: 'erMajorDungeons',
  name: 'Shuffle Major Dungeons with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, the boss-containing dungeons and uninverted Stone Tower Temple will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => x.erDungeons !== 'none',
}, {
  key: 'erMinorDungeons',
  name: 'Shuffle OoT Minor Dungeons with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, Bottom of the Well, Ice Cavern and Gerudo Training Grounds will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erDungeons !== 'none'
}, {
  key: 'erGanonCastle',
  name: 'Shuffle Ganon\'s Castle with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, Ganon\'s Castle will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erDungeons !== 'none'
}, {
  key: 'erGanonTower',
  name: 'Shuffle Ganon\'s Tower with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, Ganon\'s Tower will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erDungeons !== 'none'
}, {
  key: 'erMoon',
  name: 'Shuffle Clock Tower Roof with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, Clock Tower Roof will be shuffled among dungeons.<br>When paired with another dungeon shuffle, saving is enabled on the Clock Tower Roof, allowing you to leave by warping back to spawn.',
  default: false,
  cond: (x: any) => hasMM(x) && x.erDungeons !== 'none'
}, {
  key: 'erSpiderHouses',
  name: 'Shuffle Spider Houses with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, the Swamp and Ocean Spider Houses will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasMM(x) && x.erDungeons !== 'none'
}, {
  key: 'erPirateFortress',
  name: 'Shuffle Pirates\' Fortress with Dungeons',
  category: 'entrances',
  type: 'boolean',
  default: false,
  description: 'If turned on, the main Pirates\' Fortress entrance will be shuffled among dungeons.<br>This setting is disabled if the other entrances are shuffled among the overworld.',
  cond: (x: any) => hasMM(x) && x.erDungeons !== 'none' && ((x.erPiratesWorld && x.erOverworld === 'none') || !x.erPiratesWorld)
}, {
  key: 'erBeneathWell',
  name: 'Shuffle Beneath The Well with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, the entrance in Ikana Canyon and the exit in Ikana Castle Exterior will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasMM(x) && x.erDungeons !== 'none'
}, {
  key: 'erIkanaCastle',
  name: 'Shuffle Ikana Castle\'s Interior with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, the main entrance leading into Ikana Castle\'s Interior will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasMM(x) && x.erDungeons !== 'none'
}, {
  key: 'erSecretShrine',
  name: 'Shuffle Secret Shrine with Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, Secret Shrine will be shuffled among dungeons.',
  default: false,
  cond: (x: any) => hasMM(x) && x.erDungeons !== 'none'
}, {
  key: 'erGrottos',
  name: 'Grotto Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  description: 'Shuffle grottos and graves either within their own game or across both',
  default: 'none'
}, {
  key: 'erIndoors',
  name: 'Interiors Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  default: 'none',
  description: 'Shuffle interiors either within their own game or across both',
}, {
  key: 'erIndoorsMajor',
  name: 'Shuffle Most Interiors',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle most interiors with each other.',
  default: false,
  cond: (x: any) => x.erIndoors !== 'none'
}, {
  key: 'erIndoorsExtra',
  name: 'Shuffle Extra Interiors',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle additional, more complex interiors. These include:<br>- OoT: Link\'s House, Temple of Time, Windmill, Kak Potion Shop<br>- MM: Stock Pot Inn, Astral Observatory/Bombers\' Hideout, Swamp Tourist Hut, Ikana Spring Cave, Music Box House<br>- Pirate\'s Fortress Sewers Exit if Shuffle Pirate Fortress Entrances is enabled',
  default: false,
  cond: (x: any) => x.erIndoors !== 'none'
}, {
  key: 'erIndoorsGameLinks',
  name: 'Shuffle Mask Shop/Clock Tower Entrances',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle the Mask Shop & Clock Tower entrances among the other indoors.',
  default: false,
  cond: (x: any) => hasOoTMM(x) && (x.erIndoors === 'full' && (!x.erMixedIndoors || x.erMixed === 'full')),
}, {
  key: 'erRegions',
  name: 'Major Regions Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  default: 'none',
  description: 'Shuffle major regions either within their own game or across both. These include:<br>- Every entrance to Hyrule Field except Market<br>- The entrance to Gerudo Fortress from Gerudo Valley<br>- The entrance to Death Mountain from Kakariko<br>- The entrances to the four main regions in MM<br>- The entrance to Romani Ranch',
  cond: (x: any) => x.erOverworld === 'none',
}, {
  key: 'erRegionsExtra',
  name: 'Shuffle Market Entrance',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle the entrance from Hyrule Field to Market among the regions.',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erRegions !== 'none'
}, {
  key: 'erRegionsShortcuts',
  name: 'Shuffle Regional Shortcuts',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffles the various shortcuts between regions. These include:<br>- Lost Woods/Goron City<br>- Lost Woods/Zora\'s River<br>- Zora\'s Domain/Lake Hylia',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erRegions !== 'none'
}, {
  key: 'erOverworld',
  name: 'Overworld Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  default: 'none',
  description: 'Shuffle every overworld entrance either within their own game or across both',
  cond: (x: any) => x.erRegions === 'none',
}, {
  key: 'erPiratesWorld',
  name: 'Shuffle Pirates\' Fortress Entrances',
  category: 'entrances',
  type: 'boolean',
  default: false,
  description: 'Shuffle some entrances within Pirates\' Fortress, including the main entrance if Overworld ER is enabled.<br>Shuffle the Sewers exit door if Extra Interiors are enabled.',
  cond: (x: any) => hasMM(x) && (x.erOverworld !== 'none' || x.erIndoorsExtra)
}, {
  key: 'erMixed',
  name: 'Mixed Pools',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  description: 'Allow shuffling multiple pools together.',
  default: 'none'
}, {
  key: 'erMixedDungeons',
  name: 'Mixed Pools - Dungeons',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, dungeons will be shuffled with other mixed pools.',
  default: false,
  cond: (x: any) => x.erMixed !== 'none' && x.erMixed === x.erDungeons,
}, {
  key: 'erMixedGrottos',
  name: 'Mixed Pools - Grottos',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, grottos will be shuffled with other mixed pools.',
  default: false,
  cond: (x: any) => x.erMixed !== 'none' && x.erMixed === x.erGrottos,
}, {
  key: 'erMixedIndoors',
  name: 'Mixed Pools - Interiors',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, interiors will be shuffled with other mixed pools.',
  default: false,
  cond: (x: any) => x.erMixed !== 'none' && x.erMixed === x.erIndoors,
}, {
  key: 'erMixedRegions',
  name: 'Mixed Pools - Regions',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, regions will be shuffled with other mixed pools.',
  default: false,
  cond: (x: any) => x.erMixed !== 'none' && x.erMixed === x.erRegions,
}, {
  key: 'erMixedOverworld',
  name: 'Mixed Pools - Overworld',
  category: 'entrances',
  type: 'boolean',
  description: 'If turned on, overworld entrances will be shuffled with other mixed pools.',
  default: false,
  cond: (x: any) => x.erMixed !== 'none' && x.erMixed === x.erOverworld,
}, {
  key: 'erSpawns',
  name: 'Spawn Shuffle',
  category: 'entrances',
  type: 'enum',
  description: 'Shuffle the starting positions of the player in OoT.',
  values: [
    { value: 'none', name: 'None' },
    { value: 'child', name: 'Child Only' },
    { value: 'adult', name: 'Adult Only' },
    { value: 'both', name: 'Both' },
  ],
  default: 'none',
  cond: hasOoT,
}, {
  key: 'erWallmasters',
  name: 'Wallmaster Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None' },
    { value: 'ownGame', name: 'Own Game', cond: hasOoTMM },
    { value: 'full', name: 'Full' },
  ],
  description: 'Enables the ability for Wallmasters to take you to random locations within their own game or across both games, based on other entrance settings',
  default: 'none'
}, {
  key: 'erWarps',
  name: 'Warp Songs and Soaring Spots Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None', description: 'Warp songs and soaring spots are not shuffled.' },
    { value: 'ootOnly', name: 'OoT Only', description: 'Shuffles only OoT\'s warp songs among each other.', cond: hasOoT },
    { value: 'mmOnly', name: 'MM Only', description: 'Shuffles only MM\'s soaring spots among each other.', cond: hasMM },
    { value: 'ownGame', name: 'Own Game', description: 'Shuffles both warp songs and soaring spots within their own game.', cond: hasOoTMM },
    { value: 'full', name: 'Full', description: 'Shuffles both warp songs and soaring spots together.' },
  ],
  description: 'Allows separate shuffling of the warp songs and soaring spots. This setting is disabled if both are selected in "One-Ways Shuffle".',
  default: 'none',
  cond: (s: any) => !s.erOneWaysSongs || !s.erOneWaysStatues
}, {
  key: 'erOneWays',
  name: 'One-Ways Shuffle',
  category: 'entrances',
  type: 'enum',
  values: [
    { value: 'none', name: 'None', description: 'One-way entrances are not shuffled.' },
    { value: 'ownGame', name: 'Own Game', description: 'One-way entrances are only shuffled among their own game.', cond: hasOoTMM },
    { value: 'full', name: 'Full', description: 'One-way entrances can be shuffled among both games.' },
  ],
  description: 'Enables the option of shuffling various one-way entrances.',
  default: 'none',
}, {
  key: 'erOneWaysMajor',
  name: 'Shuffle Standard One-Ways',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffles the Gerudo Valley to Lake Hylia and Ikana Canyon to Southern Swamp entrances.',
  default: false,
  cond: (x: any) => x.erOneWays !== 'none'
}, {
  key: 'erOneWaysIkana',
  name: 'Shuffle Ikana Castle One-Ways',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffles the one-way entrances in Ikana Castle among the others. This is the keg-blocked entrance and the block moved by the switch.',
  default: false,
  cond: (x: any) => hasMM(x) && x.erOneWays !== 'none'
}, {
  key: 'erOneWaysSongs',
  name: 'Shuffle Warp Songs with One-Ways',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffles the warp songs from OoT among one-way entrances. This setting is disabled if the warp songs are shuffled with "Warp Songs and Soaring Spots Shuffle".',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erOneWays !== 'none' && x.erWarps !== 'ootOnly' && x.erWarps !== 'full' && x.erWarps !== 'ownGame'
}, {
  key: 'erOneWaysStatues',
  name: 'Shuffle Soaring Spots with One-Ways',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffles the soaring spots from MM among one-way entrances. This setting is disabled if the soaring spots are shuffled with "Warp Songs and Soaring Spots Shuffle".',
  default: false,
  cond: (x: any) => hasMM(x) && x.erOneWays !== 'none' && x.erWarps !== 'mmOnly' && x.erWarps !== 'full' && x.erWarps !== 'ownGame'
}, {
  key: 'erOneWaysOwls',
  name: 'Shuffle Child Owl Flights',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle the two owl flights among one-way entrances.',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erOneWays !== 'none'
}, {
  key: 'erOneWaysWoods',
  name: 'Shuffle Altered Lost Woods Exits',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle the Lost Woods exits added by the "Alter Lost Woods Exits" setting among one-way entrances. ',
  default: false,
  cond: (x: any) => hasOoT(x) && x.erOneWays !== 'none' && x.alterLostWoodsExits
}, {
  key: 'erOneWaysWaterVoids',
  name: 'Shuffle the Water Void Points in MM',
  category: 'entrances',
  type: 'boolean',
  description: 'Shuffle the Water Void points among one-way entrances. These can be found at:<br>- Zora Cape<br>- Great Bay Coast, south of the Pinnacle Rock entrance<br>- Great Bay Coast, north of the Pinnacle Rock entrance<br>- Pinnacle Rock',
  default: false,
  cond: (x: any) => hasMM(x) && x.erOneWays !== 'none'
}, {
  key: 'erOneWaysAnywhere',
  name: 'Allow One-Ways to take you elsewhere than other one-ways',
  category: 'entrances',
  type: 'boolean',
  description: 'Makes it so one-ways can take you to any place also shuffled.<br>This also affects warp songs and soaring spots if they are included in one-ways.',
  default: false,
  cond: (x: any) => x.erOneWays !== 'none'
}, {
  key: 'mqDungeons',
  name: 'Master Quest Dungeons',
  category: 'main.world',
  type: 'set',
  description: 'Controls which OoT dungeons use the Master Quest layout.',
  values: [
    { value: 'DT',      name: 'Deku Tree' },
    { value: 'DC',      name: 'Dodongo Cavern' },
    { value: 'JJ',      name: 'Jabu-Jabu' },
    { value: 'Forest',  name: 'Forest Temple' },
    { value: 'Fire',    name: 'Fire Temple' },
    { value: 'Water',   name: 'Water Temple' },
    { value: 'Spirit',  name: 'Spirit Temple' },
    { value: 'Shadow',  name: 'Shadow Temple' },
    { value: 'BotW',    name: 'Bottom of the Well' },
    { value: 'IC',      name: 'Ice Cavern' },
    { value: 'GTG',     name: 'Gerudo Training Grounds' },
    { value: 'Ganon',   name: 'Ganon\'s Castle' },
  ],
  cond: hasOoT,
  default: 'none'
}, {
  key: 'jpLayouts',
  name: 'Majora\'s Mask JP Layouts',
  category: 'main.world',
  type: 'set',
  description: 'Choose which parts of Majora\'s Mask use their Japanese version, when different.',
  values: [
    { value: 'DekuPalace',    name: 'Deku Palace' },
    { value: 'StoneTower',    name: 'Stone Tower' },
    { value: 'ST',            name: 'Stone Tower Temple' },
    { value: 'GreatBayCoast', name: 'Great Bay Coast' },
  ],
  default: 'none',
  cond: hasMM,
}, {
  key: 'mmEasierLightblock',
  name: 'Easier Sun Blocks',
  category: 'main.qol',
  type: 'boolean',
  description: 'Makes the sun blocks slightly easier to remove.',
  default: false,
  cond: hasMM,
}, {
  key: 'shadowFastBoat',
  name: 'Fast Shadow Temple Boat',
  category: 'main.qol',
  type: 'boolean',
  description: 'Speeds up the Shadow Temple Boat before the last part of the dungeon',
  default: false,
  cond: hasOoT,
}, {
  key: 'openMaskShop',
  name: 'Open Mask Shop at night',
  category: 'main.qol',
  type: 'boolean',
  description: 'Makes the Mask Shop in Market open during the night',
  default: false,
  cond: hasOoTMM,
}, {
  key: 'lenientSpikes',
  name: 'Lenient Goron Spikes',
  category: 'main.qol',
  type: 'boolean',
  description: 'Goron Spikes can charge midair and keep their charge. Minimum speed for Goron Spikes is removed.',
  default: true,
  cond: hasMM,
}, {
  key: 'fastBunnyHood',
  name: 'Fast Bunny Hood',
  category: 'main.qol',
  type: 'boolean',
  description: 'Modifies the Bunny Hood in OoT to give a speed increase',
  default: true,
  cond: hasOoT,
}, {
  key: 'critWiggleDisable',
  name: 'Disable Crit Wiggle',
  category: 'main.qol',
  type: 'boolean',
  description: 'Disables the camera zoom-in and weird movements when low on health',
  default: true
}, {
  key: 'fastMasks',
  name: 'Fast Form Transitions',
  category: 'main.qol',
  type: 'boolean',
  description: 'Makes the mask transitions very fast',
  default: false,
  cond: hasMM,
}, {
  key: 'keepItemsReset',
  name: 'Keep Items on Cycle Reset',
  category: 'main.qol',
  type: 'boolean',
  description: 'Keeps items through a cycle reset',
  default: false,
  cond: hasMM,
}, {
  key: 'autoInvert',
  name: 'Auto-Invert Time (MM)',
  category: 'main.qol',
  type: 'enum',
  description: 'Auto-inverts time at the start of a cycle',
  values: [
    { value: 'never', name: 'Never' },
    { value: 'firstCycle', name: 'First Cycle' },
    { value: 'always', name: 'Always' },
  ],
  default: 'never',
  cond: hasMM,
}] as const;

export const SUBCATEGORIES = [{
  key: "Misc.",
  categories: [
    { key: "CAMC", category: "main.camc" },
    { key: "Quality of Life", category: "main.qol" },
    { key: "Miscellaneous", category: "main.misc" }
  ]
}] as const;
