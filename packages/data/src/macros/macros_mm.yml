# Time
"clock_separate(x)": "!setting(clocks) || (setting(progressiveClocks, separate) && has(x))"
"clock_ascending(x)": "!setting(clocks) || (setting(progressiveClocks, ascending) && has(CLOCK, x))"
"clock_descending(x)": "!setting(clocks) || (setting(progressiveClocks, descending) && has(CLOCK, x))"

"clock_day1":   "clock_separate(CLOCK1) || clock_ascending(0) || clock_descending(5)"
"clock_night1": "clock_separate(CLOCK2) || clock_ascending(1) || clock_descending(4)"
"clock_day2":   "clock_separate(CLOCK3) || clock_ascending(2) || clock_descending(3)"
"clock_night2": "clock_separate(CLOCK4) || clock_ascending(3) || clock_descending(2)"
"clock_day3":   "clock_separate(CLOCK5) || clock_ascending(4) || clock_descending(1)"
"clock_night3": "clock_separate(CLOCK6) || clock_ascending(5) || clock_descending(0)"

"raw_at(x)": "mm_time(at, x)"
"raw_after(x)": "mm_time(after, x)"
"raw_before(x)": "mm_time(before, x)"
"raw_between(a, b)": "mm_time(between, a, b)"

"is_day1": "raw_before(NIGHT1_PM_06_00) && clock_day1"
"is_night1": "raw_between(NIGHT1_PM_06_00, DAY2_AM_06_00) && clock_night1"
"is_day2": "raw_between(DAY2_AM_06_00, NIGHT2_PM_06_00) && clock_day2"
"is_night2": "raw_between(NIGHT2_PM_06_00, DAY3_AM_06_00) && clock_night2"
"is_day3": "raw_between(DAY3_AM_06_00, NIGHT3_PM_06_00) && clock_day3"
"is_night3": "raw_after(NIGHT3_PM_06_00) && clock_night3"

"clock_filter": "!setting(clocks) || is_day1 || is_night1 || is_day2 || is_night2 || is_day3 || is_night3"

"is_day": "is_day1 || is_day2 || is_day3"
"is_night": "is_night1 || is_night2 || is_night3"
"first_day": "is_day1 || is_night1"
"second_day": "is_day2 || is_night2"
"final_day": "is_day3 || is_night3"

"between(a, b)": "raw_between(a, b) && clock_filter"
"after(a)": "raw_after(a) && clock_filter"
"before(a)": "raw_before(a) && clock_filter"
"at(a)": "raw_at(a) && clock_filter"

"midnight": "between(NIGHT1_AM_12_00, DAY2_AM_06_00) || between(NIGHT2_AM_12_00, DAY3_AM_06_00) || after(NIGHT3_AM_12_00)"

"grandma_story_1": "before(DAY1_PM_04_00) || between(DAY2_AM_06_00, DAY2_PM_04_00) || (is_day1 && (clock_night1 || clock_day2 || clock_night2 || clock_day3 || clock_night3 || setting(moonCrash, cycle))) || (is_day2 && (clock_night2 || clock_day3 || clock_night3 || setting(moonCrash, cycle)))"
"grandma_story_2": "(is_day1 && (clock_day2 || clock_night2 || clock_day3 || clock_night3 || setting(moonCrash, cycle))) || (is_day2 && (clock_day3 || clock_night3 || setting(moonCrash, cycle)))"

"stone_of_agony": "!setting(stoneAgonyMm) || (cond(setting(sharedStoneAgony), has(SHARED_STONE_OF_AGONY), has(STONE_OF_AGONY))) || trick(MM_HIDDEN_GROTTOS)"

# Region State
"is_winter": "flag_on(MM_REGION_NORTH_CURSED) && flag_off(MM_REGION_NORTH_CLEARED)"
"is_spring": "flag_on(MM_REGION_NORTH_CLEARED) && flag_off(MM_REGION_NORTH_CURSED) && ((setting(erBoss, none) && setting(regionState, dungeonBeaten) && event(BOSS_GOHT)) || event(CLEAR_STATE_SNOWHEAD))"

"is_swamp_poisoned": "flag_on(MM_REGION_SWAMP_CURSED) && flag_off(MM_REGION_SWAMP_CLEARED)"
"is_swamp_cleared": "flag_on(MM_REGION_SWAMP_CLEARED) && flag_off(MM_REGION_SWAMP_CURSED) && ((setting(erBoss, none) && setting(regionState, dungeonBeaten) && event(BOSS_ODOLWA)) || event(CLEAR_STATE_WOODFALL))"

"is_ocean_cursed": "flag_on(MM_REGION_OCEAN_CURSED) && flag_off(MM_REGION_OCEAN_CLEARED)"
"is_ocean_cleared": "flag_on(MM_REGION_OCEAN_CLEARED) && flag_off(MM_REGION_OCEAN_CURSED) && ((setting(erBoss, none) && setting(regionState, dungeonBeaten) && event(BOSS_GYORG)) || event(CLEAR_STATE_GREAT_BAY))"

"is_valley_cursed": "flag_on(MM_REGION_VALLEY_CURSED) && flag_off(MM_REGION_VALLEY_CLEARED)"
"is_valley_cleared": "flag_on(MM_REGION_VALLEY_CLEARED) && flag_off(MM_REGION_VALLEY_CURSED) && ((setting(erBoss, none) && setting(regionState, dungeonBeaten) && event(BOSS_TWINMOLD)) || event(CLEAR_STATE_IKANA))"

# Age
"is_child": "!setting(crossAge) || age(child)"
"is_adult": "setting(crossAge) && age(adult)"
"is_tall": "has_mask_zora || is_adult"
"is_short": "has(MASK_DEKU) || is_child"

# Spells
"can_use_din": "setting(spellFireMm) && can_use_din_raw"
"can_use_farore": "setting(spellWindMm) && can_use_farore_raw"
"can_use_nayru": "setting(spellLoveMm) && can_use_nayru_raw"

# Boots
"has_iron_boots": "setting(bootsIronMm) && has_iron_boots_raw"
"has_hover_boots": "setting(bootsHoverMm) && has_hover_boots_raw"

# Tunics
"has_tunic_goron_strict": "setting(tunicGoronMm) && has_tunic_goron_raw"
"has_tunic_zora_strict": "setting(tunicZoraMm) && has_tunic_zora_raw"
"has_tunic_goron": "has_tunic_goron_strict || trick(MM_TUNICS)"
"has_tunic_zora": "has_tunic_zora_strict || trick(MM_TUNICS)"

# Scales
"can_dive_small": "setting(scalesMm) && has_scale_raw(1)"
"can_dive_big": "setting(scalesMm) && has_scale_raw(2)"

# Strength
"can_lift_bracelet": "!setting(strengthMm) || has_strength_raw(1)"
"can_lift_silver": "setting(strengthMm) && has_strength_raw(2)"
"can_lift_gold": "setting(strengthMm) && has_strength_raw(3)"
"can_carry_keg": "has_mask_goron || (setting(kegStrength3) && can_lift_gold)"

# Megaton Hammer
"can_hammer": "setting(hammerMm) && has_hammer_raw"

# Ocarina
"ocarina_button(x, y)": "cond(setting(ocarinaButtonsShuffleMm), cond(setting(sharedOcarinaButtons), has(y), has(x)), true)"
"ocarina_button_a": "ocarina_button(BUTTON_A, SHARED_BUTTON_A)"
"ocarina_button_right": "ocarina_button(BUTTON_C_RIGHT, SHARED_BUTTON_C_RIGHT)"
"ocarina_button_left": "ocarina_button(BUTTON_C_LEFT, SHARED_BUTTON_C_LEFT)"
"ocarina_button_up": "ocarina_button(BUTTON_C_UP, SHARED_BUTTON_C_UP)"
"ocarina_button_down": "ocarina_button(BUTTON_C_DOWN, SHARED_BUTTON_C_DOWN)"

"ocarina_button_any2": "ocarina_button_any2_a || ocarina_button_any2_right || ocarina_button_any2_left || ocarina_button_any2_up"
"ocarina_button_any2_a": "ocarina_button_a && (ocarina_button_right || ocarina_button_left || ocarina_button_up || ocarina_button_down)"
"ocarina_button_any2_right": "ocarina_button_right && (ocarina_button_left || ocarina_button_up || ocarina_button_down)"
"ocarina_button_any2_left": "ocarina_button_left && (ocarina_button_up || ocarina_button_down)"
"ocarina_button_any2_up": "ocarina_button_up && ocarina_button_down"

"has_ocarina_n(x)": "has(OCARINA, x) || has(SHARED_OCARINA, x)"
"has_ocarina": "cond(setting(sharedOcarina), cond(setting(fairyOcarinaMm), has_ocarina_n(1), has_ocarina_n(2)), has_ocarina_n(1))"
"can_play(song)": "has_ocarina && has(song)"
"can_play_cross(x)": "can_play(x) && setting(crossWarpOot)"

"can_play_sun": "(can_play(SONG_SUN) || can_play(SHARED_SONG_SUN)) && ocarina_button_right && ocarina_button_down && ocarina_button_up"
"can_play_time": "(can_play(SONG_TIME) || can_play(SHARED_SONG_TIME)) && ocarina_button_a && ocarina_button_right && ocarina_button_down"
"can_play_epona": "(can_play(SONG_EPONA) || can_play(SHARED_SONG_EPONA)) && ocarina_button_up && ocarina_button_right && ocarina_button_left"
"can_play_storms": "(can_play(SONG_STORMS) || can_play(SHARED_SONG_STORMS)) && ocarina_button_a && ocarina_button_down && ocarina_button_up"
"can_play_healing": "can_play(SONG_HEALING) && ocarina_button_down && ocarina_button_right && ocarina_button_left"
"can_play_soaring": "can_play(SONG_SOARING) && ocarina_button_down && ocarina_button_up && ocarina_button_left"

"can_play_awakening": "can_play(SONG_AWAKENING) && ocarina_button_up && ocarina_button_right && ocarina_button_left && ocarina_button_a"
"can_play_goron_half": "has_ocarina && has_goron_song_half && ocarina_button_a && ocarina_button_right && ocarina_button_left"
"can_play_goron": "has_ocarina && has_goron_song && ocarina_button_a && ocarina_button_right && ocarina_button_left"
"can_play_zora": "can_play(SONG_ZORA) && ocarina_button_left && ocarina_button_right && ocarina_button_up && ocarina_button_down"
"can_play_emptiness": "has_ocarina && has_elegy_raw && ocarina_button_left && ocarina_button_right && ocarina_button_up && ocarina_button_down"
"can_play_order": "can_play(SONG_ORDER) && ocarina_button_right && ocarina_button_down && ocarina_button_up && ocarina_button_a"

"can_play_evan": "has_ocarina && ocarina_button_a && ocarina_button_right && ocarina_button_down && ocarina_button_left"
"can_play_minigame": "has_ocarina && ocarina_button_a && ocarina_button_right && ocarina_button_down && ocarina_button_left && ocarina_button_up"
"can_play_scarecrow": "has_ocarina && ocarina_button_any2"

"can_play_cross_tp_light": "can_play_cross(OOT_SONG_TP_LIGHT) && ocarina_button_up && ocarina_button_right && ocarina_button_left"
"can_play_cross_tp_forest": "can_play_cross(OOT_SONG_TP_FOREST) && ocarina_button_a && ocarina_button_up && ocarina_button_right && ocarina_button_left"
"can_play_cross_tp_fire": "can_play_cross(OOT_SONG_TP_FIRE) && ocarina_button_a && ocarina_button_right && ocarina_button_down"
"can_play_cross_tp_water": "can_play_cross(OOT_SONG_TP_WATER) && ocarina_button_a && ocarina_button_right && ocarina_button_down && ocarina_button_left"
"can_play_cross_tp_shadow": "can_play_cross(OOT_SONG_TP_SHADOW) && ocarina_button_a && ocarina_button_right && ocarina_button_down && ocarina_button_left"
"can_play_cross_tp_spirit": "can_play_cross(OOT_SONG_TP_SPIRIT) && ocarina_button_a && ocarina_button_right && ocarina_button_down"

# Misc
"has_spin_upgrade": "cond(setting(sharedSpinUpgrade), has(SHARED_SPIN_UPGRADE), has(SPIN_UPGRADE))"
"keaton_grass_easy": "has_sword && has_magic"
"keaton_grass_hard": "keaton_grass_easy && (has_spin_upgrade || has(GREAT_FAIRY_SWORD) || has_sword_level(3))"

"break_hive": "has_weapon_range"

"has_sword_level(n)": "cond(setting(sharedSwords), has(SHARED_SWORD, n), has(SWORD, n))"
"has_b_sword": "has_sword_level(1)"
"has_sword": "has_b_sword || has(GREAT_FAIRY_SWORD)"
"has_weapon": "has_sword || can_hammer"

# Bombchu
"bombchu_license_bag_first": "license(BOMBCHU) || license(BOMBCHU_5) || license(BOMBCHU_10) || license(BOMBCHU_20) || license(SHARED_BOMBCHU) || license(SHARED_BOMBCHU_5) || license(SHARED_BOMBCHU_10) || license(SHARED_BOMBCHU_20)"
"bombchu_license_bag_separate": "has(BOMBCHU_BAG) || has(SHARED_BOMBCHU_BAG)"
"bombchu_license_bag": "(setting(bombchuBehaviorMm, bagSeparate) && bombchu_license_bag_separate) || (setting(bombchuBehaviorMm, bagFirst) && bombchu_license_bag_first)"
"bombchu_license": "((setting(bombchuBehaviorMm, free) || setting(bombchuBehaviorMm, bombBag)) && has_bomb_bag) || bombchu_license_bag"
"bombchu_drops": "bombchu_license_bag && (event(BOMBS_OR_BOMBCHU) || (setting(sharedBombchu) && event(OOT_BOMBS_OR_BOMBCHU)))"
"bombchu_source": "event(BOMBCHU) || bombchu_drops || renewable(BOMBCHU) || renewable(BOMBCHU_5) || renewable(BOMBCHU_10) || renewable(BOMBCHU_20) || (setting(sharedBombchu) && (event(OOT_BOMBCHU) || renewable(SHARED_BOMBCHU) || renewable(SHARED_BOMBCHU_5) || renewable(SHARED_BOMBCHU_10) || renewable(SHARED_BOMBCHU_20)))"
"has_bombchu": "bombchu_source && bombchu_license"

"can_break_boulders": "has_explosives || has_mask_goron || can_hammer"
"can_break_red_boulders": "has_mask_goron || can_hammer || (can_use_keg && trick(MM_KEG_RED_BOULDER))"
"break_icicle": "has_nuts || has_arrows || can_use_din || can_fight || has(MASK_DEKU) || has_explosives"

"can_use_fire_short_range": "can_use_fire_arrows || can_use_din"
"can_break_snowballs": "can_break_boulders || can_use_fire_short_range"
"can_use_lens": "can_use_lens_strict || trick(MM_LENS)"
"can_use_lens_strict": "has_magic && (has(LENS) || has(SHARED_LENS))"
"has_mask_stone": "cond(setting(sharedMaskStone), has(SHARED_MASK_STONE), has(MASK_STONE))"
"has_mask_blast": "cond(setting(sharedMaskBlast), has(SHARED_MASK_BLAST), has(MASK_BLAST))"
"has_explosives": "has_bombs || has_mask_blast || has_bombchu"
"can_use_fire_arrows": "has_magic && has_arrows && (has(ARROW_FIRE) || has(SHARED_ARROW_FIRE))"
"can_use_ice_arrows": "has_magic && has_arrows && (has(ARROW_ICE) || has(SHARED_ARROW_ICE))"
"can_use_light_arrows": "has_magic && has_arrows && (has(ARROW_LIGHT) || has(SHARED_ARROW_LIGHT))"
"can_use_keg": "event(BUY_KEG)"
"has_mirror_shield": "has(SHIELD_MIRROR) || has(SHARED_SHIELD_MIRROR) || has(SHARED_SHIELD, 3) || (cond(setting(dekuShieldMm), has(SHIELD, 3), has(SHIELD, 2)))"
"can_use_elegy": "can_play_emptiness"
"can_use_elegy2": "can_play_emptiness && (has_mask_zora || has_mask_goron)"
"can_use_elegy3": "can_play_emptiness && has_mask_zora && has_mask_goron"
"has_bomb_bag": "has(BOMB_BAG) || has(SHARED_BOMB_BAG)"
"has_beans": "event(MAGIC_BEANS_PALACE) || (license(MAGIC_BEAN) && renewable(MAGIC_BEAN))"
"can_use_beans": "has_beans && (has_water || can_play_storms)"
"scarecrow_set": "event(SCARECROW) || setting(freeScarecrowMm)"
"scarecrow_hookshot_short": "scarecrow_set && has_ocarina && can_hookshot_short"
"scarecrow_hookshot": "scarecrow_set && has_ocarina && can_hookshot"
"goron_fast_roll": "has_mask_goron && has_magic"
"can_use_deku_bubble": "has(MASK_DEKU) && has_magic"
"has_weapon_range": "has_arrows || can_hookshot_short || has_mask_zora || can_use_deku_bubble"
"has_paper": "has(DEED_LAND) || has(DEED_SWAMP) || has(DEED_MOUNTAIN) || has(DEED_OCEAN) || has(LETTER_TO_KAFEI) || has(LETTER_TO_MAMA)"
"can_fight": "has_weapon || has_mask_zora || has_mask_goron"
"has_goron_song_half": "cond(setting(progressiveGoronLullaby, progressive), has(SONG_GORON_HALF), has(SONG_GORON))"
"has_goron_song": "cond(setting(progressiveGoronLullaby, progressive), has(SONG_GORON_HALF, 2), has(SONG_GORON))"
"can_lullaby_half": "has_mask_goron && can_play_goron_half"
"can_lullaby": "has_mask_goron && can_play_goron"
"has_shield": "renewable(SHIELD_HERO) || renewable(SHIELD_DEKU) || renewable(SHARED_SHIELD_DEKU) || renewable(SHARED_SHIELD_HYLIAN) || has(SHIELD, 1) || cond(setting(dekuShieldMm), has(SHARED_SHIELD, 1), has(SHARED_SHIELD, 2)) || has_mirror_shield"
"can_activate_crystal": "can_break_boulders || has_weapon || has_arrows || can_hookshot_short || has(MASK_DEKU) || has_mask_zora || has_sticks"
"can_evade_gerudo": "has_arrows || can_hookshot_short || has_mask_zora || has_mask_stone"
"can_goron_bomb_jump": "trick(MM_GORON_BOMB_JUMP) && has_mask_goron && (has_bombs || trick_keg_explosives)"
"can_hookshot_n(x)": "has(HOOKSHOT, x) || has(SHARED_HOOKSHOT, x)"
"can_hookshot_short": "can_hookshot_n(1)"
"can_hookshot": "cond(setting(shortHookshotMm), can_hookshot_n(2), can_hookshot_n(1))"
"trick_keg_explosives": "can_use_keg && trick(MM_KEG_EXPLOSIVES)"
"trick_sht_hot_water": "((has_hot_water_distance && has(OWL_SNOWHEAD)) || has_hot_water_er || has_hot_water_farore) && trick(MM_SHT_HOT_WATER)"
"trick_sht_hot_water_er": "(has_hot_water_er || has_hot_water_farore) && trick(MM_SHT_HOT_WATER)"
"can_reset_time": "event(ACCESS)"
"can_reset_time_impl": "setting(moonCrash, cycle) || can_play_time || (event(MAJORA) && trick(MM_MAJORA_LOGIC) && !is_goal_triforce)"
"can_reset_time_dungeon": "cond(setting(erMoon), (((trick(MM_MAJORA_LOGIC) && event(MAJORA) && !is_goal_triforce) || setting(moonCrash, cycle)) && (before(NIGHT3_AM_12_00) || can_use_farore || setting(autoInvert, always))) || can_play_time, can_reset_time)"
"can_reset_time_on_moon": "can_play_time || (event(MAJORA) && trick(MM_MAJORA_LOGIC) && !is_goal_triforce)"
"has_sticks": "event(STICKS) || renewable(STICK) || renewable(SHARED_STICK) || renewable(SHARED_STICKS_5) || renewable(SHARED_STICKS_10) || (setting(sharedNutsSticks) && event(OOT_STICKS))"
"has_nuts": "event(NUTS) || renewable(NUT) || renewable(NUTS_5) || renewable(NUTS_10) || renewable(SHARED_NUT) || renewable(SHARED_NUTS_5) || renewable(SHARED_NUTS_10) || (setting(sharedNutsSticks) && event(OOT_NUTS))"
"has_bow": "has(BOW) || has(SHARED_BOW)"
"has_arrows": "has_bow && (event(ARROWS) || renewable(ARROWS_10) || renewable(ARROWS_30) || renewable(ARROWS_40) || renewable(SHARED_ARROWS_5) || renewable(SHARED_ARROWS_10) || renewable(SHARED_ARROWS_30) || renewable(SHARED_ARROWS_40))"
"has_bombs": "has_bomb_bag && (event(BOMBS) || event(BOMBS_OR_BOMBCHU) || (setting(sharedBombBags) && (event(OOT_BOMBS) || event(OOT_BOMBS_OR_BOMBCHU))) || renewable(BOMBS_5) || renewable(BOMBS_10) || renewable(BOMBS_20) || renewable(BOMBS_30) || renewable(SHARED_BOMBS_5) || renewable(SHARED_BOMBS_10) || renewable(SHARED_BOMBS_20) || renewable(SHARED_BOMBS_30))"
"has_magic": "(has(MAGIC_UPGRADE) || has(SHARED_MAGIC_UPGRADE)) && (event(MAGIC) || has_magic_jar || has_green_potion || has_blue_potion || event(CHATEAU))"
"has_double_magic": "(has(MAGIC_UPGRADE, 2) || has(SHARED_MAGIC_UPGRADE, 2)) && (event(MAGIC) || has_green_potion || has_blue_potion || event(CHATEAU))"
"has_rupees": "event(RUPEES)"
"bombers1": "event(BOMBERS_NORTH1) && event(BOMBERS_EAST1) && event(BOMBERS_WEST1)"
"bombers2": "event(BOMBERS_NORTH2) && event(BOMBERS_EAST2) && event(BOMBERS_WEST2)"
"bombers3": "event(BOMBERS_NORTH3) && event(BOMBERS_EAST3) && event(BOMBERS_WEST3)"
"has_fire_sticks": "has_sticks || can_use_fire_short_range"
"can_pass_gibdo": "has(MASK_GIBDO) && soul_redead_gibdo"
"can_get_gossip_fairy": "can_play_healing || can_play_epona"
"can_jumpslash": "has_weapon || has_sticks || has_mask_zora"
"can_enter_zora_door": "has_mask_zora || is_ocean_cleared || (short_hook_anywhere && trick(MM_ZORA_HALL_DOORS))"
"woodfall_raised": "event(OPEN_WOODFALL_TEMPLE) || setting(openDungeonsMm, WF) || ((setting(clearStateDungeonsMm, WF) || setting(clearStateDungeonsMm, both)) && is_swamp_cleared)"
"blizzard_stopped": "event(OPEN_SNOWHEAD_TEMPLE) || setting(openDungeonsMm, SH) || is_spring"
"turtle_woken": "(can_play_zora && has_mask_zora) || setting(openDungeonsMm, GB) || ((setting(clearStateDungeonsMm, GB) || setting(clearStateDungeonsMm, both)) && is_ocean_cleared)"

"underwater_walking": "has_mask_zora || (has_tunic_zora && has_iron_boots)"
"underwater_walking_strict": "has_mask_zora || (has_tunic_zora_strict && has_iron_boots)"

"can_swim": "true"

# Hot water
"OLD_hot_water(winter, spring)": "has_bottle && ((event(winter) && event(spring)) || (is_winter && event(winter)) || (is_spring && event(spring)))"

"hot_water(x)": "has_bottle && event(x)"
"hot_water_winter(x)": "is_winter && hot_water(x)"
"hot_water_spring(x)": "is_spring && hot_water(x)"
"has_hot_water_mtn": "hot_water_winter(HOT_WATER_NORTH_WINTER) || hot_water_spring(HOT_WATER_NORTH_SPRING) || (hot_water(HOT_WATER_NORTH_WINTER) && hot_water(HOT_WATER_NORTH_SPRING))"
"has_hot_water_well": "hot_water_winter(HOT_WATER_WELL_WINTER) || hot_water_spring(HOT_WATER_WELL_SPRING) || (hot_water(HOT_WATER_WELL_WINTER) && hot_water(HOT_WATER_WELL_SPRING))"
"has_hot_water_any": "has_hot_water_mtn || has_hot_water_well || ((hot_water(HOT_WATER_NORTH_WINTER) || hot_water(HOT_WATER_WELL_WINTER)) && (hot_water(HOT_WATER_NORTH_SPRING) || hot_water(HOT_WATER_WELL_SPRING)))"
"has_hot_water_distance": "(can_play_soaring || can_use_farore) && has_hot_water_any"
"has_hot_water_er": "er_enabled && has_hot_water_any"
"has_hot_water_farore": "can_use_farore && has_hot_water_any"

# Hit targets
"hit_target_range_melee": "has_sticks || has_nuts || has_weapon || has_bombs || hit_target_range_close"
"hit_target_range_close": "can_hookshot_short || hit_target_range_far"
"hit_target_range_far": "can_use_deku_bubble || has_arrows || has_mask_zora || can_hookshot"

# Bottles
"has_bottle": "has(BOTTLE_EMPTY) || has(BOTTLE_POTION_RED) || has(BOTTLE_POTION_GREEN) || has(BOTTLE_POTION_BLUE) || has(BOTTLE_MILK) || event(GOLD_DUST_USED) || has(BOTTLE_CHATEAU) || has(BOTTLE_FAIRY) || has(BOTTLE_POE) || has(BOTTLE_BIG_POE)"
"has_blue_potion": "has_bottle && (renewable(POTION_BLUE) || renewable(BOTTLE_POTION_BLUE))"
"has_red_potion": "has_bottle && (renewable(POTION_RED) || renewable(BOTTLE_POTION_RED))"
"has_green_potion": "has_bottle && (renewable(POTION_GREEN) || renewable(BOTTLE_POTION_GREEN))"
"has_milk": "has_bottle && (renewable(MILK) || renewable(BOTTLE_MILK))"
"has_red_or_blue_potion": "has_red_potion || has_blue_potion"
"has_zora_egg": "has_bottle && (event(ZORA_EGGS_HOOKSHOT_ROOM) || event(ZORA_EGGS_BARREL_MAZE) || event(ZORA_EGGS_LONE_GUARD) || event(ZORA_EGGS_TREASURE_ROOM) || event(ZORA_EGGS_PINNACLE_ROCK))"
"has_all_zora_eggs": "has_bottle && event(ZORA_EGGS_HOOKSHOT_ROOM) && event(ZORA_EGGS_BARREL_MAZE) && event(ZORA_EGGS_LONE_GUARD) && event(ZORA_EGGS_TREASURE_ROOM) && event(ZORA_EGGS_PINNACLE_ROCK)"
"has_chateau": "has_bottle && (renewable(CHATEAU) || renewable(BOTTLE_CHATEAU))"
"has_big_poe": "has_bottle && (event(WELL_BIG_POE) || event(DAMPE_BIG_POE) || renewable(BOTTLE_BIG_POE) || renewable(BIG_POE))"
"has_bugs": "has_bottle && event(BUGS)"
"has_fish": "has_bottle && event(FISH)"
"has_water": "has_bottle && event(WATER)"
"has_mushroom": "has_bottle && event(MUSHROOM)"
"has_poe": "has_bottle && event(POE)"
"has_fairy": "has_bottle && event(FAIRY)"
"has_deku_princess": "has_bottle && event(DEKU_PRINCESS)"

# Wallets
"has_wallet(n)": "cond(setting(childWallets), has(WALLET, n) || has(SHARED_WALLET, n), has(WALLET, n - 1) || has(SHARED_WALLET, n - 1))"
"can_use_wallet(n)": "has_rupees && has_wallet(n)"
"wallet_price(range, id)": "price(range, id, 0) || has_rupees && ((price(range, id, 99) && has_wallet(1)) || (price(range, id, 200) && has_wallet(2)) || (price(range, id, 500) && has_wallet(3)) || (setting(colossalWallets) && price(range, id, 999) && has_wallet(4)) || (setting(bottomlessWallets) && price(range, id, 9999) && has_wallet(5)))"
"shop_price(id)": "wallet_price(MM_SHOPS, id)"
"shop_ex_price(id)": "wallet_price(MM_SHOPS_EX, id)"
"tingle_price(id)": "wallet_price(MM_TINGLE, id)"

# Keys
"has_skeleton_key": "setting(skeletonKeyMm) && cond(setting(sharedSkeletonKey), has(SHARED_SKELETON_KEY), has(SKELETON_KEY))"
"boss_key(x)": "setting(bossKeyShuffleMm, removed) || has(x)"
"small_keys(type, x, y, count)": "has_skeleton_key || (setting(smallKeyShuffleMm, removed) || cond(setting(smallKeyRingMm, type), has(y), has(x, count)))"
"small_keys_wf(n)": "small_keys(WF, SMALL_KEY_WF, KEY_RING_WF, n)"
"small_keys_sh(n)": "small_keys(SH, SMALL_KEY_SH, KEY_RING_SH, n)"
"small_keys_gb(n)": "small_keys(GB, SMALL_KEY_GB, KEY_RING_GB, n)"
"small_keys_st(n)": "small_keys(ST, SMALL_KEY_ST, KEY_RING_ST, n)"

# Masks
"has_mask_bunny": "has(MASK_BUNNY) || has(SHARED_MASK_BUNNY)"
"has_mask_truth": "has(MASK_TRUTH) || has(SHARED_MASK_TRUTH)"
"has_mask_keaton": "has(MASK_KEATON) || has(SHARED_MASK_KEATON)"
"has_mask_zora": "has(MASK_ZORA) || has(SHARED_MASK_ZORA)"
"has_mask_goron": "has(MASK_GORON) || has(SHARED_MASK_GORON)"

"er_enabled": "setting(erMajorDungeons) || setting(erMinorDungeons) || setting(erSpiderHouses) || setting(erGanonCastle) || setting(erGanonTower) || setting(erBeneathWell) || setting(erPirateFortress) || setting(erSecretShrine) || setting(erIkanaCastle) || setting(erMoon) || setting(erIndoorsMajor) || setting(erIndoorsExtra) || !setting(erRegions, none) || !setting(erOverworld, none) || !setting(erBoss, none) || !setting(erWarps, none) || setting(erOneWaysMajor) || setting(erOneWaysIkana) || setting(erOneWaysSongs) || setting(erOneWaysStatues) || setting(erOneWaysOwls) || !setting(erGrottos, none) || !setting(erWallmasters, none)"
"dungeon_er": "setting(erMajorDungeons) || setting(erSpiderHouses) || setting(erBeneathWell) || setting(erPirateFortress) || setting(erSecretShrine) || setting(erIkanaCastle) || (setting(erDungeons, full) && (setting(erMinorDungeons) || setting(erGanonCastle) || setting(erGanonTower)))"

# Misc
"soul_enemy(x)": "(!setting(soulsEnemyMm)) || has(x)"
"soul_boss(x)": "(!setting(soulsBossMm)) || has(x)"
"soul_npc(x)": "(!setting(soulsNpcMm)) || has(x)"
"soul_misc(x)": "(!setting(soulsMiscMm)) || has(x)"
"short_hook_anywhere": "can_hookshot_short && setting(hookshotAnywhereMm, logical)"
"hookshot_anywhere": "can_hookshot && setting(hookshotAnywhereMm, logical)"
"gs": "soul_gs"

# Enemies
"can_kill_baba_nuts": "soul_deku_baba && (can_fight || has(MASK_DEKU) || can_hookshot_short || has_explosives || has_arrows)"
"can_kill_baba_sticks": "soul_deku_baba && (can_fight || has(MASK_DEKU) || can_hookshot_short || has_explosives || has_arrows)"
"can_kill_baba_both_sticks": "soul_deku_baba && (has_sword || has(MASK_DEKU))"
"can_kill_freezard_short_range": "can_fight || can_use_light_arrows || can_use_fire_short_range || has_explosives || can_hookshot_short"
"can_kill_big_poe": "has_arrows || has_mask_zora || can_use_deku_bubble"
